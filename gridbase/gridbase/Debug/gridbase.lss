
gridbase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000013f6  0000148a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000287  00800060  00800060  0000148a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141d  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000424  00000000  00000000  000030fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b76  00000000  00000000  00003521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4a  00000000  00000000  0000492a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00005774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_1>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_11>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	a5 09       	sbc	r26, r5

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e6 ef       	ldi	r30, 0xF6	; 246
      6a:	f3 e1       	ldi	r31, 0x13	; 19
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a0 36       	cpi	r26, 0x60	; 96
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	12 e0       	ldi	r17, 0x02	; 2
      7a:	a0 e6       	ldi	r26, 0x60	; 96
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a7 3e       	cpi	r26, 0xE7	; 231
      84:	b1 07       	cpc	r27, r17
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	c6 e5       	ldi	r28, 0x56	; 86
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	22 97       	sbiw	r28, 0x02	; 2
      92:	fe 01       	movw	r30, r28
      94:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__tablejump__>
      98:	c4 35       	cpi	r28, 0x54	; 84
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 3a 08 	call	0x1074	; 0x1074 <main>
      a2:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z12EEPROM_writehh>:
enum State{LF, NODE, DATA_DEST, END} state;
enum SkillState{DRYRUN,FINDINTRUDER,CARRYINTRUDER,GOTOKEY,CARRYKEY} skillState;

void EEPROM_write(unsigned char uiAddress , unsigned char ucData)
{
	while(EECR&&(1<<EEWE));
      aa:	9c b3       	in	r25, 0x1c	; 28
      ac:	99 23       	and	r25, r25
      ae:	e9 f7       	brne	.-6      	; 0xaa <_Z12EEPROM_writehh>
	EEAR=uiAddress;
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	9f bb       	out	0x1f, r25	; 31
      b4:	8e bb       	out	0x1e, r24	; 30
	EEDR=ucData;
      b6:	6d bb       	out	0x1d, r22	; 29
	cli();
      b8:	f8 94       	cli
	EECR|=(1<<EEMWE);
      ba:	e2 9a       	sbi	0x1c, 2	; 28
	EECR|=(1<<EEWE);
      bc:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
      be:	78 94       	sei
	
}
      c0:	08 95       	ret

000000c2 <_Z11EEPROM_readh>:
unsigned char EEPROM_read(unsigned char uiAddress)
{
	while(EECR&&(1<<EEWE));
      c2:	9c b3       	in	r25, 0x1c	; 28
      c4:	99 23       	and	r25, r25
      c6:	e9 f7       	brne	.-6      	; 0xc2 <_Z11EEPROM_readh>
	EEAR=uiAddress;
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	9f bb       	out	0x1f, r25	; 31
      cc:	8e bb       	out	0x1e, r24	; 30
	cli();
      ce:	f8 94       	cli
	EECR|=(1<<EERE);
      d0:	e0 9a       	sbi	0x1c, 0	; 28
	sei();
      d2:	78 94       	sei
	return EEDR;
      d4:	8d b3       	in	r24, 0x1d	; 29
}
      d6:	08 95       	ret

000000d8 <_Z8adc_initv>:
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
      d8:	80 e4       	ldi	r24, 0x40	; 64
      da:	87 b9       	out	0x07, r24	; 7

	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      dc:	87 e8       	ldi	r24, 0x87	; 135
      de:	86 b9       	out	0x06, r24	; 6
}
      e0:	08 95       	ret

000000e2 <_Z8adc_readh>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
      e2:	97 b1       	in	r25, 0x07	; 7
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
      e4:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
      e6:	98 7f       	andi	r25, 0xF8	; 248
      e8:	98 2b       	or	r25, r24
      ea:	97 b9       	out	0x07, r25	; 7

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
      ec:	36 9a       	sbi	0x06, 6	; 6

	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
      ee:	36 99       	sbic	0x06, 6	; 6
      f0:	fe cf       	rjmp	.-4      	; 0xee <_Z8adc_readh+0xc>

	return (ADC);
      f2:	84 b1       	in	r24, 0x04	; 4
      f4:	95 b1       	in	r25, 0x05	; 5
}
      f6:	08 95       	ret

000000f8 <_Z11pathPlanner5Point9DirectionS_>:
int next[(MAX_NODE_X)*(MAX_NODE_Y+1)][(MAX_NODE_X)*(MAX_NODE_Y+1)];
int dist[(MAX_NODE_X)*(MAX_NODE_Y+1)][(MAX_NODE_X)*(MAX_NODE_Y+1)];

int maxpts;
enum Command pathPlanner(Point cP, Direction cD, Point gP)
{
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	dc 01       	movw	r26, r24
      fe:	cb 01       	movw	r24, r22
		return STRAIGHT;
		if(cD == WEST)
		return TR;
		return TL;
	}
	return REACHED;
     100:	fc 01       	movw	r30, r24
     102:	b8 01       	movw	r22, r16
     104:	c9 01       	movw	r24, r18
int dist[(MAX_NODE_X)*(MAX_NODE_Y+1)][(MAX_NODE_X)*(MAX_NODE_Y+1)];

int maxpts;
enum Command pathPlanner(Point cP, Direction cD, Point gP)
{
	if(gP.x - cP.x != 0)
     106:	e0 17       	cp	r30, r16
     108:	f1 07       	cpc	r31, r17
     10a:	a9 f0       	breq	.+42     	; 0x136 <_Z11pathPlanner5Point9DirectionS_+0x3e>
	{
		if(gP.x - cP.x > 0) // Move EAST
     10c:	6e 1b       	sub	r22, r30
     10e:	7f 0b       	sbc	r23, r31
     110:	16 16       	cp	r1, r22
     112:	17 06       	cpc	r1, r23
     114:	44 f4       	brge	.+16     	; 0x126 <_Z11pathPlanner5Point9DirectionS_+0x2e>
		{
			if(cD == WEST)
     116:	43 30       	cpi	r20, 0x03	; 3
     118:	31 f1       	breq	.+76     	; 0x166 <_Z11pathPlanner5Point9DirectionS_+0x6e>
			return UT;
			if(cD == EAST)
     11a:	42 30       	cpi	r20, 0x02	; 2
     11c:	31 f1       	breq	.+76     	; 0x16a <_Z11pathPlanner5Point9DirectionS_+0x72>
			return STRAIGHT;
			if(cD == NORTH)
     11e:	44 23       	and	r20, r20
     120:	31 f5       	brne	.+76     	; 0x16e <_Z11pathPlanner5Point9DirectionS_+0x76>
			return TR;
     122:	82 e0       	ldi	r24, 0x02	; 2
     124:	39 c0       	rjmp	.+114    	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
			return TL;
		}
		// Move West
		if(cD == EAST)
     126:	42 30       	cpi	r20, 0x02	; 2
     128:	21 f1       	breq	.+72     	; 0x172 <_Z11pathPlanner5Point9DirectionS_+0x7a>
		return UT;
		if(cD == WEST)
     12a:	43 30       	cpi	r20, 0x03	; 3
     12c:	21 f1       	breq	.+72     	; 0x176 <_Z11pathPlanner5Point9DirectionS_+0x7e>
		return STRAIGHT;
		if(cD == SOUTH)
     12e:	41 30       	cpi	r20, 0x01	; 1
     130:	21 f5       	brne	.+72     	; 0x17a <_Z11pathPlanner5Point9DirectionS_+0x82>
		return TR;
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	31 c0       	rjmp	.+98     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		return TL;
	}
	if(gP.y - cP.y != 0)
     136:	a2 17       	cp	r26, r18
     138:	b3 07       	cpc	r27, r19
     13a:	09 f1       	breq	.+66     	; 0x17e <_Z11pathPlanner5Point9DirectionS_+0x86>
	{
		if(gP.y - cP.y > 0) // Move SOUTH
     13c:	8a 1b       	sub	r24, r26
     13e:	9b 0b       	sbc	r25, r27
     140:	18 16       	cp	r1, r24
     142:	19 06       	cpc	r1, r25
     144:	44 f4       	brge	.+16     	; 0x156 <_Z11pathPlanner5Point9DirectionS_+0x5e>
		{
			if(cD == NORTH)
     146:	44 23       	and	r20, r20
     148:	e1 f0       	breq	.+56     	; 0x182 <_Z11pathPlanner5Point9DirectionS_+0x8a>
			return UT;
			if(cD == SOUTH)
     14a:	41 30       	cpi	r20, 0x01	; 1
     14c:	e1 f0       	breq	.+56     	; 0x186 <_Z11pathPlanner5Point9DirectionS_+0x8e>
			return STRAIGHT;
			if(cD == EAST)
     14e:	42 30       	cpi	r20, 0x02	; 2
     150:	e1 f4       	brne	.+56     	; 0x18a <_Z11pathPlanner5Point9DirectionS_+0x92>
			return TR;
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	21 c0       	rjmp	.+66     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
			return TL;
		}
		// Move NORTH
		if(cD == SOUTH)
     156:	41 30       	cpi	r20, 0x01	; 1
     158:	d1 f0       	breq	.+52     	; 0x18e <_Z11pathPlanner5Point9DirectionS_+0x96>
		return UT;
		if(cD == NORTH)
     15a:	44 23       	and	r20, r20
     15c:	d1 f0       	breq	.+52     	; 0x192 <_Z11pathPlanner5Point9DirectionS_+0x9a>
		return STRAIGHT;
		if(cD == WEST)
     15e:	43 30       	cpi	r20, 0x03	; 3
     160:	d1 f4       	brne	.+52     	; 0x196 <_Z11pathPlanner5Point9DirectionS_+0x9e>
		return TR;
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	19 c0       	rjmp	.+50     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
	if(gP.x - cP.x != 0)
	{
		if(gP.x - cP.x > 0) // Move EAST
		{
			if(cD == WEST)
			return UT;
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	17 c0       	rjmp	.+46     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
			if(cD == EAST)
			return STRAIGHT;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	15 c0       	rjmp	.+42     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
			if(cD == NORTH)
			return TR;
			return TL;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	13 c0       	rjmp	.+38     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		}
		// Move West
		if(cD == EAST)
		return UT;
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	11 c0       	rjmp	.+34     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		if(cD == WEST)
		return STRAIGHT;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0f c0       	rjmp	.+30     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		if(cD == SOUTH)
		return TR;
		return TL;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0d c0       	rjmp	.+26     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		return STRAIGHT;
		if(cD == WEST)
		return TR;
		return TL;
	}
	return REACHED;
     17e:	84 e0       	ldi	r24, 0x04	; 4
     180:	0b c0       	rjmp	.+22     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
	if(gP.y - cP.y != 0)
	{
		if(gP.y - cP.y > 0) // Move SOUTH
		{
			if(cD == NORTH)
			return UT;
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	09 c0       	rjmp	.+18     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
			if(cD == SOUTH)
			return STRAIGHT;
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	07 c0       	rjmp	.+14     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
			if(cD == EAST)
			return TR;
			return TL;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	05 c0       	rjmp	.+10     	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		}
		// Move NORTH
		if(cD == SOUTH)
		return UT;
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	03 c0       	rjmp	.+6      	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		if(cD == NORTH)
		return STRAIGHT;
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	01 c0       	rjmp	.+2      	; 0x198 <_Z11pathPlanner5Point9DirectionS_+0xa0>
		if(cD == WEST)
		return TR;
		return TL;
     196:	81 e0       	ldi	r24, 0x01	; 1
	}
	return REACHED;
}
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	08 95       	ret

0000019e <_Z17pathPlannerDryRun5Point9Direction>:
enum Command pathPlannerDryRun(Point cP, Direction cD)
{
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	8b 01       	movw	r16, r22
     1a4:	9c 01       	movw	r18, r24
		return STRAIGHT;
		if(cD == EAST)
		return TR;
		return TL;
	}
	return REACHED;
     1a6:	cb 01       	movw	r24, r22
	}
	return REACHED;
}
enum Command pathPlannerDryRun(Point cP, Direction cD)
{
	if(cP.y%2==0)
     1a8:	20 fd       	sbrc	r18, 0
     1aa:	1c c0       	rjmp	.+56     	; 0x1e4 <_Z17pathPlannerDryRun5Point9Direction+0x46>
	{
		if(MAX_NODE_X -1- cP.x != 0)
     1ac:	62 30       	cpi	r22, 0x02	; 2
     1ae:	71 05       	cpc	r23, r1
     1b0:	89 f1       	breq	.+98     	; 0x214 <_Z17pathPlannerDryRun5Point9Direction+0x76>
		{
			if(MAX_NODE_X-1 - cP.x > 0) // Move EAST
     1b2:	22 e0       	ldi	r18, 0x02	; 2
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	b9 01       	movw	r22, r18
     1b8:	68 1b       	sub	r22, r24
     1ba:	79 0b       	sbc	r23, r25
     1bc:	cb 01       	movw	r24, r22
     1be:	18 16       	cp	r1, r24
     1c0:	19 06       	cpc	r1, r25
     1c2:	44 f4       	brge	.+16     	; 0x1d4 <_Z17pathPlannerDryRun5Point9Direction+0x36>
			{
				if(cD == WEST)
     1c4:	43 30       	cpi	r20, 0x03	; 3
     1c6:	a9 f1       	breq	.+106    	; 0x232 <_Z17pathPlannerDryRun5Point9Direction+0x94>
				return UT;
				if(cD == EAST)
     1c8:	42 30       	cpi	r20, 0x02	; 2
     1ca:	a9 f1       	breq	.+106    	; 0x236 <_Z17pathPlannerDryRun5Point9Direction+0x98>
				return STRAIGHT;
				if(cD == NORTH)
     1cc:	44 23       	and	r20, r20
     1ce:	a9 f5       	brne	.+106    	; 0x23a <_Z17pathPlannerDryRun5Point9Direction+0x9c>
				return TR;
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	4e c0       	rjmp	.+156    	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
				return TL;
			}
			// Move West
			if(cD == EAST)
     1d4:	42 30       	cpi	r20, 0x02	; 2
     1d6:	99 f1       	breq	.+102    	; 0x23e <_Z17pathPlannerDryRun5Point9Direction+0xa0>
			return UT;
			if(cD == WEST)
     1d8:	43 30       	cpi	r20, 0x03	; 3
     1da:	99 f1       	breq	.+102    	; 0x242 <_Z17pathPlannerDryRun5Point9Direction+0xa4>
			return STRAIGHT;
			if(cD == SOUTH)
     1dc:	41 30       	cpi	r20, 0x01	; 1
     1de:	99 f5       	brne	.+102    	; 0x246 <_Z17pathPlannerDryRun5Point9Direction+0xa8>
			return TR;
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	46 c0       	rjmp	.+140    	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			return TL;
		}
	}
	else
	{
		if(0-cP.x!=0)
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	b1 f0       	breq	.+44     	; 0x214 <_Z17pathPlannerDryRun5Point9Direction+0x76>
		{
			if(0- cP.x > 0) // Move EAST
     1e8:	90 95       	com	r25
     1ea:	81 95       	neg	r24
     1ec:	9f 4f       	sbci	r25, 0xFF	; 255
     1ee:	18 16       	cp	r1, r24
     1f0:	19 06       	cpc	r1, r25
     1f2:	44 f4       	brge	.+16     	; 0x204 <_Z17pathPlannerDryRun5Point9Direction+0x66>
			{
				if(cD == WEST)
     1f4:	43 30       	cpi	r20, 0x03	; 3
     1f6:	49 f1       	breq	.+82     	; 0x24a <_Z17pathPlannerDryRun5Point9Direction+0xac>
				return UT;
				if(cD == EAST)
     1f8:	42 30       	cpi	r20, 0x02	; 2
     1fa:	49 f1       	breq	.+82     	; 0x24e <_Z17pathPlannerDryRun5Point9Direction+0xb0>
				return STRAIGHT;
				if(cD == NORTH)
     1fc:	44 23       	and	r20, r20
     1fe:	49 f5       	brne	.+82     	; 0x252 <_Z17pathPlannerDryRun5Point9Direction+0xb4>
				return TR;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	36 c0       	rjmp	.+108    	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
				return TL;
			}
			// Move West
			if(cD == EAST)
     204:	42 30       	cpi	r20, 0x02	; 2
     206:	39 f1       	breq	.+78     	; 0x256 <_Z17pathPlannerDryRun5Point9Direction+0xb8>
			return UT;
			if(cD == WEST)
     208:	43 30       	cpi	r20, 0x03	; 3
     20a:	39 f1       	breq	.+78     	; 0x25a <_Z17pathPlannerDryRun5Point9Direction+0xbc>
			return STRAIGHT;
			if(cD == SOUTH)
     20c:	41 30       	cpi	r20, 0x01	; 1
     20e:	39 f5       	brne	.+78     	; 0x25e <_Z17pathPlannerDryRun5Point9Direction+0xc0>
			return TR;
     210:	82 e0       	ldi	r24, 0x02	; 2
     212:	2e c0       	rjmp	.+92     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			return TL;
		}
	}
	if(MAX_NODE_Y -1-cP.y > 0) // Move SOUTH
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	82 1b       	sub	r24, r18
     21a:	93 0b       	sbc	r25, r19
     21c:	18 16       	cp	r1, r24
     21e:	19 06       	cpc	r1, r25
     220:	04 f5       	brge	.+64     	; 0x262 <_Z17pathPlannerDryRun5Point9Direction+0xc4>
	{
		if(cD == NORTH)
     222:	44 23       	and	r20, r20
     224:	01 f1       	breq	.+64     	; 0x266 <_Z17pathPlannerDryRun5Point9Direction+0xc8>
		return UT;
		if(cD == SOUTH)
     226:	41 30       	cpi	r20, 0x01	; 1
     228:	01 f1       	breq	.+64     	; 0x26a <_Z17pathPlannerDryRun5Point9Direction+0xcc>
		return STRAIGHT;
		if(cD == EAST)
     22a:	42 30       	cpi	r20, 0x02	; 2
     22c:	01 f5       	brne	.+64     	; 0x26e <_Z17pathPlannerDryRun5Point9Direction+0xd0>
		return TR;
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	1f c0       	rjmp	.+62     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
		if(MAX_NODE_X -1- cP.x != 0)
		{
			if(MAX_NODE_X-1 - cP.x > 0) // Move EAST
			{
				if(cD == WEST)
				return UT;
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	1d c0       	rjmp	.+58     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
				if(cD == EAST)
				return STRAIGHT;
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	1b c0       	rjmp	.+54     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
				if(cD == NORTH)
				return TR;
				return TL;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	19 c0       	rjmp	.+50     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			}
			// Move West
			if(cD == EAST)
			return UT;
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	17 c0       	rjmp	.+46     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			if(cD == WEST)
			return STRAIGHT;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	15 c0       	rjmp	.+42     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			if(cD == SOUTH)
			return TR;
			return TL;
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	13 c0       	rjmp	.+38     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
		if(0-cP.x!=0)
		{
			if(0- cP.x > 0) // Move EAST
			{
				if(cD == WEST)
				return UT;
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	11 c0       	rjmp	.+34     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
				if(cD == EAST)
				return STRAIGHT;
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0f c0       	rjmp	.+30     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
				if(cD == NORTH)
				return TR;
				return TL;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0d c0       	rjmp	.+26     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			}
			// Move West
			if(cD == EAST)
			return UT;
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	0b c0       	rjmp	.+22     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			if(cD == WEST)
			return STRAIGHT;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	09 c0       	rjmp	.+18     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
			if(cD == SOUTH)
			return TR;
			return TL;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	07 c0       	rjmp	.+14     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
		return STRAIGHT;
		if(cD == EAST)
		return TR;
		return TL;
	}
	return REACHED;
     262:	84 e0       	ldi	r24, 0x04	; 4
     264:	05 c0       	rjmp	.+10     	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
		}
	}
	if(MAX_NODE_Y -1-cP.y > 0) // Move SOUTH
	{
		if(cD == NORTH)
		return UT;
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	03 c0       	rjmp	.+6      	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
		if(cD == SOUTH)
		return STRAIGHT;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <_Z17pathPlannerDryRun5Point9Direction+0xd2>
		if(cD == EAST)
		return TR;
		return TL;
     26e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return REACHED;
};
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	08 95       	ret

00000276 <_Z10linefollowv>:
void linefollow(void)
{
	
	if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)){
     276:	b4 9b       	sbis	0x16, 4	; 22
     278:	2a c0       	rjmp	.+84     	; 0x2ce <_Z10linefollowv+0x58>
     27a:	b5 9b       	sbis	0x16, 5	; 22
     27c:	28 c0       	rjmp	.+80     	; 0x2ce <_Z10linefollowv+0x58>
     27e:	b6 9b       	sbis	0x16, 6	; 22
     280:	26 c0       	rjmp	.+76     	; 0x2ce <_Z10linefollowv+0x58>
	PORTC=FORWARD;}
     282:	81 e1       	ldi	r24, 0x11	; 17
     284:	85 bb       	out	0x15, r24	; 21
     286:	08 95       	ret
	//	return;
	else if(BLACK(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)) {
     288:	b5 9b       	sbis	0x16, 5	; 22
     28a:	23 c0       	rjmp	.+70     	; 0x2d2 <_Z10linefollowv+0x5c>
     28c:	b6 9b       	sbis	0x16, 6	; 22
     28e:	21 c0       	rjmp	.+66     	; 0x2d2 <_Z10linefollowv+0x5c>
		PORTC=RIGHT0TURN;
     290:	89 e0       	ldi	r24, 0x09	; 9
     292:	85 bb       	out	0x15, r24	; 21
     294:	08 95       	ret
	}
	//	return;
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&WHITE(RIGHT_S)) {
     296:	b5 99       	sbic	0x16, 5	; 22
     298:	1e c0       	rjmp	.+60     	; 0x2d6 <_Z10linefollowv+0x60>
     29a:	b6 9b       	sbis	0x16, 6	; 22
     29c:	1c c0       	rjmp	.+56     	; 0x2d6 <_Z10linefollowv+0x60>
		PORTC=RIGHT0TURN;
     29e:	89 e0       	ldi	r24, 0x09	; 9
     2a0:	85 bb       	out	0x15, r24	; 21
     2a2:	08 95       	ret
	}
	//	return;
	else if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&BLACK(RIGHT_S)){
     2a4:	b5 9b       	sbis	0x16, 5	; 22
     2a6:	19 c0       	rjmp	.+50     	; 0x2da <_Z10linefollowv+0x64>
     2a8:	b6 99       	sbic	0x16, 6	; 22
     2aa:	17 c0       	rjmp	.+46     	; 0x2da <_Z10linefollowv+0x64>
		PORTC=LEFT0TURN;
     2ac:	82 e1       	ldi	r24, 0x12	; 18
     2ae:	85 bb       	out	0x15, r24	; 21
     2b0:	08 95       	ret
	}
	//	return;
	else if(WHITE(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     2b2:	b5 99       	sbic	0x16, 5	; 22
     2b4:	14 c0       	rjmp	.+40     	; 0x2de <_Z10linefollowv+0x68>
     2b6:	b6 99       	sbic	0x16, 6	; 22
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <_Z10linefollowv+0x68>
		PORTC=LEFT0TURN;
     2ba:	82 e1       	ldi	r24, 0x12	; 18
     2bc:	85 bb       	out	0x15, r24	; 21
     2be:	08 95       	ret
	}
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     2c0:	b5 99       	sbic	0x16, 5	; 22
     2c2:	0f c0       	rjmp	.+30     	; 0x2e2 <_Z10linefollowv+0x6c>
     2c4:	b6 99       	sbic	0x16, 6	; 22
     2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <_Z10linefollowv+0x6c>
		PORTC=BACK;
     2c8:	8a e0       	ldi	r24, 0x0A	; 10
     2ca:	85 bb       	out	0x15, r24	; 21
     2cc:	08 95       	ret
{
	
	if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)){
	PORTC=FORWARD;}
	//	return;
	else if(BLACK(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)) {
     2ce:	b4 9b       	sbis	0x16, 4	; 22
     2d0:	db cf       	rjmp	.-74     	; 0x288 <_Z10linefollowv+0x12>
		PORTC=RIGHT0TURN;
	}
	//	return;
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&WHITE(RIGHT_S)) {
     2d2:	b4 9b       	sbis	0x16, 4	; 22
     2d4:	e0 cf       	rjmp	.-64     	; 0x296 <_Z10linefollowv+0x20>
		PORTC=RIGHT0TURN;
	}
	//	return;
	else if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&BLACK(RIGHT_S)){
     2d6:	b4 99       	sbic	0x16, 4	; 22
     2d8:	e5 cf       	rjmp	.-54     	; 0x2a4 <_Z10linefollowv+0x2e>
		PORTC=LEFT0TURN;
	}
	//	return;
	else if(WHITE(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     2da:	b4 99       	sbic	0x16, 4	; 22
     2dc:	ea cf       	rjmp	.-44     	; 0x2b2 <_Z10linefollowv+0x3c>
		PORTC=LEFT0TURN;
	}
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     2de:	b4 9b       	sbis	0x16, 4	; 22
     2e0:	ef cf       	rjmp	.-34     	; 0x2c0 <_Z10linefollowv+0x4a>
     2e2:	08 95       	ret

000002e4 <_Z18linefollowbackwardv>:
	//	return;
}
void linefollowbackward()
{
	
	if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)){
     2e4:	b4 9b       	sbis	0x16, 4	; 22
     2e6:	2a c0       	rjmp	.+84     	; 0x33c <_Z18linefollowbackwardv+0x58>
     2e8:	b5 9b       	sbis	0x16, 5	; 22
     2ea:	28 c0       	rjmp	.+80     	; 0x33c <_Z18linefollowbackwardv+0x58>
     2ec:	b6 9b       	sbis	0x16, 6	; 22
     2ee:	26 c0       	rjmp	.+76     	; 0x33c <_Z18linefollowbackwardv+0x58>
	PORTC=BACK;}
     2f0:	8a e0       	ldi	r24, 0x0A	; 10
     2f2:	85 bb       	out	0x15, r24	; 21
     2f4:	08 95       	ret
	//	return;
	else if(BLACK(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)) {
     2f6:	b5 9b       	sbis	0x16, 5	; 22
     2f8:	23 c0       	rjmp	.+70     	; 0x340 <_Z18linefollowbackwardv+0x5c>
     2fa:	b6 9b       	sbis	0x16, 6	; 22
     2fc:	21 c0       	rjmp	.+66     	; 0x340 <_Z18linefollowbackwardv+0x5c>
		PORTC=LEFTBACK;
     2fe:	88 e0       	ldi	r24, 0x08	; 8
     300:	85 bb       	out	0x15, r24	; 21
     302:	08 95       	ret
	}
	//	return;
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&WHITE(RIGHT_S)) {
     304:	b5 99       	sbic	0x16, 5	; 22
     306:	1e c0       	rjmp	.+60     	; 0x344 <_Z18linefollowbackwardv+0x60>
     308:	b6 9b       	sbis	0x16, 6	; 22
     30a:	1c c0       	rjmp	.+56     	; 0x344 <_Z18linefollowbackwardv+0x60>
		PORTC=LEFTBACK;
     30c:	88 e0       	ldi	r24, 0x08	; 8
     30e:	85 bb       	out	0x15, r24	; 21
     310:	08 95       	ret
	}
	//	return;
	else if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&BLACK(RIGHT_S)){
     312:	b5 9b       	sbis	0x16, 5	; 22
     314:	19 c0       	rjmp	.+50     	; 0x348 <_Z18linefollowbackwardv+0x64>
     316:	b6 99       	sbic	0x16, 6	; 22
     318:	17 c0       	rjmp	.+46     	; 0x348 <_Z18linefollowbackwardv+0x64>
		PORTC=RIGHTBACK;
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	85 bb       	out	0x15, r24	; 21
     31e:	08 95       	ret
	}
	//	return;
	else if(WHITE(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     320:	b5 99       	sbic	0x16, 5	; 22
     322:	14 c0       	rjmp	.+40     	; 0x34c <_Z18linefollowbackwardv+0x68>
     324:	b6 99       	sbic	0x16, 6	; 22
     326:	12 c0       	rjmp	.+36     	; 0x34c <_Z18linefollowbackwardv+0x68>
		PORTC=RIGHTBACK;
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	85 bb       	out	0x15, r24	; 21
     32c:	08 95       	ret
	}
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     32e:	b5 99       	sbic	0x16, 5	; 22
     330:	0f c0       	rjmp	.+30     	; 0x350 <_Z18linefollowbackwardv+0x6c>
     332:	b6 99       	sbic	0x16, 6	; 22
     334:	0d c0       	rjmp	.+26     	; 0x350 <_Z18linefollowbackwardv+0x6c>
		PORTC=BACK;
     336:	8a e0       	ldi	r24, 0x0A	; 10
     338:	85 bb       	out	0x15, r24	; 21
     33a:	08 95       	ret
{
	
	if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)){
	PORTC=BACK;}
	//	return;
	else if(BLACK(LEFT_S)&&WHITE(CENTER_S)&&WHITE(RIGHT_S)) {
     33c:	b4 9b       	sbis	0x16, 4	; 22
     33e:	db cf       	rjmp	.-74     	; 0x2f6 <_Z18linefollowbackwardv+0x12>
		PORTC=LEFTBACK;
	}
	//	return;
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&WHITE(RIGHT_S)) {
     340:	b4 9b       	sbis	0x16, 4	; 22
     342:	e0 cf       	rjmp	.-64     	; 0x304 <_Z18linefollowbackwardv+0x20>
		PORTC=LEFTBACK;
	}
	//	return;
	else if(WHITE(LEFT_S)&&WHITE(CENTER_S)&&BLACK(RIGHT_S)){
     344:	b4 99       	sbic	0x16, 4	; 22
     346:	e5 cf       	rjmp	.-54     	; 0x312 <_Z18linefollowbackwardv+0x2e>
		PORTC=RIGHTBACK;
	}
	//	return;
	else if(WHITE(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     348:	b4 99       	sbic	0x16, 4	; 22
     34a:	ea cf       	rjmp	.-44     	; 0x320 <_Z18linefollowbackwardv+0x3c>
		PORTC=RIGHTBACK;
	}
	else if(BLACK(LEFT_S)&&BLACK(CENTER_S)&&BLACK(RIGHT_S)){
     34c:	b4 9b       	sbis	0x16, 4	; 22
     34e:	ef cf       	rjmp	.-34     	; 0x32e <_Z18linefollowbackwardv+0x4a>
     350:	08 95       	ret

00000352 <_Z9openFrontv>:
	
	//	return;
}
void openFront()
{
	PORTC=STOP;
     352:	15 ba       	out	0x15, r1	; 21
	PORTA=OPEN;
     354:	80 e4       	ldi	r24, 0x40	; 64
     356:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	93 ed       	ldi	r25, 0xD3	; 211
     35c:	a0 e3       	ldi	r26, 0x30	; 48
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	90 40       	sbci	r25, 0x00	; 0
     362:	a0 40       	sbci	r26, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <_Z9openFrontv+0xc>
     366:	00 c0       	rjmp	.+0      	; 0x368 <_Z9openFrontv+0x16>
     368:	00 00       	nop
	_delay_ms(1000);
	PORTA=STOP;
     36a:	1b ba       	out	0x1b, r1	; 27
}
     36c:	08 95       	ret

0000036e <_Z10closeFrontv>:
void closeFront()
{
	PORTC=STOP;
     36e:	15 ba       	out	0x15, r1	; 21
	PORTA=CLOSE;
     370:	80 e8       	ldi	r24, 0x80	; 128
     372:	8b bb       	out	0x1b, r24	; 27
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	93 ed       	ldi	r25, 0xD3	; 211
     378:	a0 e3       	ldi	r26, 0x30	; 48
     37a:	81 50       	subi	r24, 0x01	; 1
     37c:	90 40       	sbci	r25, 0x00	; 0
     37e:	a0 40       	sbci	r26, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <_Z10closeFrontv+0xc>
     382:	00 c0       	rjmp	.+0      	; 0x384 <_Z10closeFrontv+0x16>
     384:	00 00       	nop
	_delay_ms(1000);
	PORTA=STOP;
     386:	1b ba       	out	0x1b, r1	; 27

}
     388:	08 95       	ret

0000038a <_Z15nodeLEFTFORWARDv>:
void nodeLEFTFORWARD()
{
	pwmLeft=3;
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	90 93 b5 02 	sts	0x02B5, r25
     392:	80 93 b4 02 	sts	0x02B4, r24
	pwmRight=12;
     396:	8c e0       	ldi	r24, 0x0C	; 12
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	90 93 b3 02 	sts	0x02B3, r25
     39e:	80 93 b2 02 	sts	0x02B2, r24
	PORTC=LEFT0TURN;
     3a2:	82 e1       	ldi	r24, 0x12	; 18
     3a4:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		if(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S)){
     3a6:	b3 99       	sbic	0x16, 3	; 22
     3a8:	15 c0       	rjmp	.+42     	; 0x3d4 <_Z15nodeLEFTFORWARDv+0x4a>
     3aa:	b7 99       	sbic	0x16, 7	; 22
     3ac:	13 c0       	rjmp	.+38     	; 0x3d4 <_Z15nodeLEFTFORWARDv+0x4a>
     3ae:	b4 9b       	sbis	0x16, 4	; 22
     3b0:	11 c0       	rjmp	.+34     	; 0x3d4 <_Z15nodeLEFTFORWARDv+0x4a>
     3b2:	b6 9b       	sbis	0x16, 6	; 22
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <_Z15nodeLEFTFORWARDv+0x4a>
     3b6:	b5 9b       	sbis	0x16, 5	; 22
     3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <_Z15nodeLEFTFORWARDv+0x4a>
			pwmLeft=10;
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	90 93 b5 02 	sts	0x02B5, r25
     3c2:	80 93 b4 02 	sts	0x02B4, r24
			pwmRight=12;
     3c6:	8c e0       	ldi	r24, 0x0C	; 12
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	90 93 b3 02 	sts	0x02B3, r25
     3ce:	80 93 b2 02 	sts	0x02B2, r24
		}
		
		_delay_ms(25);
	}
	
}
     3d2:	08 95       	ret
     3d4:	8f e7       	ldi	r24, 0x7F	; 127
     3d6:	98 e3       	ldi	r25, 0x38	; 56
     3d8:	a1 e0       	ldi	r26, 0x01	; 1
     3da:	81 50       	subi	r24, 0x01	; 1
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	a0 40       	sbci	r26, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <_Z15nodeLEFTFORWARDv+0x50>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_Z15nodeLEFTFORWARDv+0x5a>
     3e4:	00 00       	nop
     3e6:	df cf       	rjmp	.-66     	; 0x3a6 <_Z15nodeLEFTFORWARDv+0x1c>

000003e8 <_Z16nodeRIGHTFORWARDv>:
void nodeRIGHTFORWARD()
{
	pwmLeft=13;
     3e8:	8d e0       	ldi	r24, 0x0D	; 13
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	90 93 b5 02 	sts	0x02B5, r25
     3f0:	80 93 b4 02 	sts	0x02B4, r24
	pwmRight=5;
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 b3 02 	sts	0x02B3, r25
     3fc:	80 93 b2 02 	sts	0x02B2, r24
	PORTC=RIGHT0TURN;
     400:	89 e0       	ldi	r24, 0x09	; 9
     402:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		if(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S)){
     404:	b3 99       	sbic	0x16, 3	; 22
     406:	15 c0       	rjmp	.+42     	; 0x432 <_Z16nodeRIGHTFORWARDv+0x4a>
     408:	b7 99       	sbic	0x16, 7	; 22
     40a:	13 c0       	rjmp	.+38     	; 0x432 <_Z16nodeRIGHTFORWARDv+0x4a>
     40c:	b4 9b       	sbis	0x16, 4	; 22
     40e:	11 c0       	rjmp	.+34     	; 0x432 <_Z16nodeRIGHTFORWARDv+0x4a>
     410:	b6 9b       	sbis	0x16, 6	; 22
     412:	0f c0       	rjmp	.+30     	; 0x432 <_Z16nodeRIGHTFORWARDv+0x4a>
     414:	b5 9b       	sbis	0x16, 5	; 22
     416:	0d c0       	rjmp	.+26     	; 0x432 <_Z16nodeRIGHTFORWARDv+0x4a>
			pwmLeft=10;
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	90 93 b5 02 	sts	0x02B5, r25
     420:	80 93 b4 02 	sts	0x02B4, r24
			pwmRight=12;
     424:	8c e0       	ldi	r24, 0x0C	; 12
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 b3 02 	sts	0x02B3, r25
     42c:	80 93 b2 02 	sts	0x02B2, r24
			return;
		}
		
		_delay_ms(25);
	}
}
     430:	08 95       	ret
     432:	8f e7       	ldi	r24, 0x7F	; 127
     434:	98 e3       	ldi	r25, 0x38	; 56
     436:	a1 e0       	ldi	r26, 0x01	; 1
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	a0 40       	sbci	r26, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <_Z16nodeRIGHTFORWARDv+0x50>
     440:	00 c0       	rjmp	.+0      	; 0x442 <_Z16nodeRIGHTFORWARDv+0x5a>
     442:	00 00       	nop
     444:	df cf       	rjmp	.-66     	; 0x404 <_Z16nodeRIGHTFORWARDv+0x1c>

00000446 <_Z12nodeStraightv>:
void nodeStraight()
{
	pwmLeft=5;
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 b5 02 	sts	0x02B5, r25
     44e:	80 93 b4 02 	sts	0x02B4, r24
	pwmRight=6;
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	90 93 b3 02 	sts	0x02B3, r25
     45a:	80 93 b2 02 	sts	0x02B2, r24
	PORTC=FORWARD;
     45e:	81 e1       	ldi	r24, 0x11	; 17
     460:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		
		if((BLACK(LEFTEXTREME_S)||BLACK(RIGHTEXTREME_S))&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S)){
     462:	b3 9b       	sbis	0x16, 3	; 22
     464:	02 c0       	rjmp	.+4      	; 0x46a <_Z12nodeStraightv+0x24>
     466:	b7 99       	sbic	0x16, 7	; 22
     468:	13 c0       	rjmp	.+38     	; 0x490 <_Z12nodeStraightv+0x4a>
     46a:	b4 9b       	sbis	0x16, 4	; 22
     46c:	11 c0       	rjmp	.+34     	; 0x490 <_Z12nodeStraightv+0x4a>
     46e:	b6 9b       	sbis	0x16, 6	; 22
     470:	0f c0       	rjmp	.+30     	; 0x490 <_Z12nodeStraightv+0x4a>
     472:	b5 9b       	sbis	0x16, 5	; 22
     474:	0d c0       	rjmp	.+26     	; 0x490 <_Z12nodeStraightv+0x4a>
		pwmLeft=10;
     476:	8a e0       	ldi	r24, 0x0A	; 10
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 b5 02 	sts	0x02B5, r25
     47e:	80 93 b4 02 	sts	0x02B4, r24
		pwmRight=12;
     482:	8c e0       	ldi	r24, 0x0C	; 12
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	90 93 b3 02 	sts	0x02B3, r25
     48a:	80 93 b2 02 	sts	0x02B2, r24
		return;
		}		
		_delay_ms(25);
	}
}
     48e:	08 95       	ret
     490:	8f e7       	ldi	r24, 0x7F	; 127
     492:	98 e3       	ldi	r25, 0x38	; 56
     494:	a1 e0       	ldi	r26, 0x01	; 1
     496:	81 50       	subi	r24, 0x01	; 1
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	a0 40       	sbci	r26, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <_Z12nodeStraightv+0x50>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_Z12nodeStraightv+0x5a>
     4a0:	00 00       	nop
     4a2:	df cf       	rjmp	.-66     	; 0x462 <_Z12nodeStraightv+0x1c>

000004a4 <_Z9nodeUTurnv>:
void nodeUTurn()
{
	pwmLeft=5;
     4a4:	85 e0       	ldi	r24, 0x05	; 5
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	90 93 b5 02 	sts	0x02B5, r25
     4ac:	80 93 b4 02 	sts	0x02B4, r24
	pwmRight=6;
     4b0:	86 e0       	ldi	r24, 0x06	; 6
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 93 b3 02 	sts	0x02B3, r25
     4b8:	80 93 b2 02 	sts	0x02B2, r24
	PORTC=RIGHT0TURN;
     4bc:	89 e0       	ldi	r24, 0x09	; 9
     4be:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		if(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S)){
     4c0:	b3 99       	sbic	0x16, 3	; 22
     4c2:	15 c0       	rjmp	.+42     	; 0x4ee <_Z9nodeUTurnv+0x4a>
     4c4:	b7 99       	sbic	0x16, 7	; 22
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <_Z9nodeUTurnv+0x4a>
     4c8:	b4 9b       	sbis	0x16, 4	; 22
     4ca:	11 c0       	rjmp	.+34     	; 0x4ee <_Z9nodeUTurnv+0x4a>
     4cc:	b6 9b       	sbis	0x16, 6	; 22
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <_Z9nodeUTurnv+0x4a>
     4d0:	b5 9b       	sbis	0x16, 5	; 22
     4d2:	0d c0       	rjmp	.+26     	; 0x4ee <_Z9nodeUTurnv+0x4a>
			pwmLeft=10;
     4d4:	8a e0       	ldi	r24, 0x0A	; 10
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 b5 02 	sts	0x02B5, r25
     4dc:	80 93 b4 02 	sts	0x02B4, r24
			pwmRight=12;
     4e0:	8c e0       	ldi	r24, 0x0C	; 12
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	90 93 b3 02 	sts	0x02B3, r25
     4e8:	80 93 b2 02 	sts	0x02B2, r24
		}
		
		_delay_ms(20);
	}
	
}
     4ec:	08 95       	ret
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	99 ef       	ldi	r25, 0xF9	; 249
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	a0 40       	sbci	r26, 0x00	; 0
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <_Z9nodeUTurnv+0x50>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <_Z9nodeUTurnv+0x5a>
     4fe:	00 00       	nop
     500:	df cf       	rjmp	.-66     	; 0x4c0 <_Z9nodeUTurnv+0x1c>

00000502 <_Z5align9Direction>:
void align(Direction gD)
{
     502:	cf 93       	push	r28
     504:	c8 2f       	mov	r28, r24
	int turnDir;
	switch(gD)
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	61 f0       	breq	.+24     	; 0x522 <_Z5align9Direction+0x20>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	38 f0       	brcs	.+14     	; 0x51c <_Z5align9Direction+0x1a>
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	59 f0       	breq	.+22     	; 0x528 <_Z5align9Direction+0x26>
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	59 f4       	brne	.+22     	; 0x52c <_Z5align9Direction+0x2a>
	{
		case EAST: turnDir=4;break;
		case WEST: turnDir=2;break;
     516:	22 e0       	ldi	r18, 0x02	; 2
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	08 c0       	rjmp	.+16     	; 0x52c <_Z5align9Direction+0x2a>
		case NORTH:turnDir=1;break;
     51c:	21 e0       	ldi	r18, 0x01	; 1
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	05 c0       	rjmp	.+10     	; 0x52c <_Z5align9Direction+0x2a>
		case SOUTH:turnDir=3;break;
     522:	23 e0       	ldi	r18, 0x03	; 3
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <_Z5align9Direction+0x2a>
void align(Direction gD)
{
	int turnDir;
	switch(gD)
	{
		case EAST: turnDir=4;break;
     528:	24 e0       	ldi	r18, 0x04	; 4
     52a:	30 e0       	ldi	r19, 0x00	; 0
		case WEST: turnDir=2;break;
		case NORTH:turnDir=1;break;
		case SOUTH:turnDir=3;break;
	}
	switch(curDir)
     52c:	80 91 b8 02 	lds	r24, 0x02B8
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	81 f0       	breq	.+32     	; 0x554 <_Z5align9Direction+0x52>
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	58 f0       	brcs	.+22     	; 0x54e <_Z5align9Direction+0x4c>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	19 f0       	breq	.+6      	; 0x542 <_Z5align9Direction+0x40>
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	61 f4       	brne	.+24     	; 0x558 <_Z5align9Direction+0x56>
     540:	03 c0       	rjmp	.+6      	; 0x548 <_Z5align9Direction+0x46>
	{
		case EAST: turnDir-=4;break;
     542:	24 50       	subi	r18, 0x04	; 4
     544:	30 40       	sbci	r19, 0x00	; 0
     546:	08 c0       	rjmp	.+16     	; 0x558 <_Z5align9Direction+0x56>
		case WEST: turnDir-=2;break;
     548:	22 50       	subi	r18, 0x02	; 2
     54a:	30 40       	sbci	r19, 0x00	; 0
     54c:	05 c0       	rjmp	.+10     	; 0x558 <_Z5align9Direction+0x56>
		case NORTH:turnDir-=1;break;
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	30 40       	sbci	r19, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <_Z5align9Direction+0x56>
		case SOUTH:turnDir-=3;break;
     554:	23 50       	subi	r18, 0x03	; 3
     556:	30 40       	sbci	r19, 0x00	; 0
	}
	turnDir+=4;
     558:	c9 01       	movw	r24, r18
     55a:	04 96       	adiw	r24, 0x04	; 4
	turnDir%=4;
     55c:	64 e0       	ldi	r22, 0x04	; 4
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divmodhi4>
			switch(turnDir)
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	91 05       	cpc	r25, r1
     568:	b1 f0       	breq	.+44     	; 0x596 <_Z5align9Direction+0x94>
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	91 05       	cpc	r25, r1
     56e:	1c f4       	brge	.+6      	; 0x576 <_Z5align9Direction+0x74>
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	41 f0       	breq	.+16     	; 0x584 <_Z5align9Direction+0x82>
     574:	12 c0       	rjmp	.+36     	; 0x59a <_Z5align9Direction+0x98>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	91 05       	cpc	r25, r1
     57a:	39 f0       	breq	.+14     	; 0x58a <_Z5align9Direction+0x88>
     57c:	83 30       	cpi	r24, 0x03	; 3
     57e:	91 05       	cpc	r25, r1
     580:	61 f4       	brne	.+24     	; 0x59a <_Z5align9Direction+0x98>
     582:	06 c0       	rjmp	.+12     	; 0x590 <_Z5align9Direction+0x8e>
			{
				case 0:
					nodeStraight();
     584:	0e 94 23 02 	call	0x446	; 0x446 <_Z12nodeStraightv>
					break;
     588:	08 c0       	rjmp	.+16     	; 0x59a <_Z5align9Direction+0x98>
				case 2:
					nodeUTurn();
     58a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_Z9nodeUTurnv>
					break;
     58e:	05 c0       	rjmp	.+10     	; 0x59a <_Z5align9Direction+0x98>
				case 3:
					nodeRIGHTFORWARD();					
     590:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z16nodeRIGHTFORWARDv>
					break;
     594:	02 c0       	rjmp	.+4      	; 0x59a <_Z5align9Direction+0x98>
				case 1:
					nodeLEFTFORWARD();					
     596:	0e 94 c5 01 	call	0x38a	; 0x38a <_Z15nodeLEFTFORWARDv>
					break;
			}
		curDir=gD;
     59a:	c0 93 b8 02 	sts	0x02B8, r28
}
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <_Z5setupv>:
void setup()
{
	DDRB =0b00000011;
     5a2:	43 e0       	ldi	r20, 0x03	; 3
     5a4:	47 bb       	out	0x17, r20	; 23
	DDRC =0xFF;
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
     5aa:	15 ba       	out	0x15, r1	; 21
	PORTB=0b11111100;
     5ac:	8c ef       	ldi	r24, 0xFC	; 252
     5ae:	88 bb       	out	0x18, r24	; 24
	DDRA =0b11110000;
     5b0:	80 ef       	ldi	r24, 0xF0	; 240
     5b2:	8a bb       	out	0x1a, r24	; 26
	PORTA=0;
     5b4:	1b ba       	out	0x1b, r1	; 27

	TCCR0|=(1<<WGM00|1<<COM01|(1 << CS01)|(0 << CS00));
     5b6:	83 b7       	in	r24, 0x33	; 51
     5b8:	82 66       	ori	r24, 0x62	; 98
     5ba:	83 bf       	out	0x33, r24	; 51
	TIMSK|=1<<TOIE0;
     5bc:	89 b7       	in	r24, 0x39	; 57
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	89 bf       	out	0x39, r24	; 57
	pwmLeft=10;
     5c2:	8a e0       	ldi	r24, 0x0A	; 10
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	90 93 b5 02 	sts	0x02B5, r25
     5ca:	80 93 b4 02 	sts	0x02B4, r24
	pwmRight=12;
     5ce:	2c e0       	ldi	r18, 0x0C	; 12
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	30 93 b3 02 	sts	0x02B3, r19
     5d6:	20 93 b2 02 	sts	0x02B2, r18
	pwmFront=10;
     5da:	90 93 b1 02 	sts	0x02B1, r25
     5de:	80 93 b0 02 	sts	0x02B0, r24
	curGoalIndex = 0;
     5e2:	10 92 be 02 	sts	0x02BE, r1
     5e6:	10 92 bd 02 	sts	0x02BD, r1
	curPoint.x = -1; curPoint.y = 0;
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	9f ef       	ldi	r25, 0xFF	; 255
     5ee:	90 93 ba 02 	sts	0x02BA, r25
     5f2:	80 93 b9 02 	sts	0x02B9, r24
     5f6:	10 92 bc 02 	sts	0x02BC, r1
     5fa:	10 92 bb 02 	sts	0x02BB, r1
	curDir = EAST;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	80 93 b8 02 	sts	0x02B8, r24
	state = LF;
     604:	10 92 b7 02 	sts	0x02B7, r1
	DDRD = 1<<PD2;		// Set PD2 as input (Using for interrupt INT0)
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD2;		// Enable PD2 pull-up resistor
     60c:	82 bb       	out	0x12, r24	; 18
	GICR = 1<<INT0;					// Enable INT0
     60e:	80 e4       	ldi	r24, 0x40	; 64
     610:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edgde
     612:	45 bf       	out	0x35, r20	; 53
	sei();
     614:	78 94       	sei
}
     616:	08 95       	ret

00000618 <_Z15writeNodeColourv>:
void writeNodeColour()
{
	unsigned char address = (MAX_NODE_X*curPoint.y +curPoint.x);
     618:	80 91 bb 02 	lds	r24, 0x02BB
     61c:	98 2f       	mov	r25, r24
     61e:	99 0f       	add	r25, r25
     620:	89 0f       	add	r24, r25
     622:	90 91 b9 02 	lds	r25, 0x02B9
     626:	89 0f       	add	r24, r25
	if((BLACK(LEFT_S)&&BLACK(RIGHT_S))||(BLACK(LEFT_S)&&(BLACK(CENTER_S)))||(BLACK(CENTER_S)&&BLACK(RIGHT_S)))
     628:	b4 99       	sbic	0x16, 4	; 22
     62a:	02 c0       	rjmp	.+4      	; 0x630 <_Z15writeNodeColourv+0x18>
     62c:	b6 9b       	sbis	0x16, 6	; 22
     62e:	08 c0       	rjmp	.+16     	; 0x640 <_Z15writeNodeColourv+0x28>
     630:	b4 99       	sbic	0x16, 4	; 22
     632:	02 c0       	rjmp	.+4      	; 0x638 <_Z15writeNodeColourv+0x20>
     634:	b5 9b       	sbis	0x16, 5	; 22
     636:	04 c0       	rjmp	.+8      	; 0x640 <_Z15writeNodeColourv+0x28>
     638:	b5 99       	sbic	0x16, 5	; 22
     63a:	0f c0       	rjmp	.+30     	; 0x65a <_Z15writeNodeColourv+0x42>
     63c:	b6 99       	sbic	0x16, 6	; 22
     63e:	0d c0       	rjmp	.+26     	; 0x65a <_Z15writeNodeColourv+0x42>
	{EEPROM_write(address,0);_delay_ms(2000);}
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	0e 94 55 00 	call	0xaa	; 0xaa <_Z12EEPROM_writehh>
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	97 ea       	ldi	r25, 0xA7	; 167
     64a:	a1 e6       	ldi	r26, 0x61	; 97
     64c:	81 50       	subi	r24, 0x01	; 1
     64e:	90 40       	sbci	r25, 0x00	; 0
     650:	a0 40       	sbci	r26, 0x00	; 0
     652:	e1 f7       	brne	.-8      	; 0x64c <_Z15writeNodeColourv+0x34>
     654:	00 c0       	rjmp	.+0      	; 0x656 <_Z15writeNodeColourv+0x3e>
     656:	00 00       	nop
     658:	08 95       	ret
	else
	EEPROM_write(address,1);
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 55 00 	call	0xaa	; 0xaa <_Z12EEPROM_writehh>
     660:	08 95       	ret

00000662 <_Z13nextneighbourPA4_h5Point>:
}
Point nextneighbour(unsigned char val[MAX_NODE_X][MAX_NODE_Y+1],Point toadd)
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	9c 01       	movw	r18, r24
     668:	db 01       	movw	r26, r22
     66a:	ca 01       	movw	r24, r20
	int i,j;
	i=toadd.x;j=toadd.y;
     66c:	ba 01       	movw	r22, r20
     66e:	cd 01       	movw	r24, r26
	if(j>0) if(val[i][j-1]==1) return Point(i,j-1);
     670:	1a 16       	cp	r1, r26
     672:	1b 06       	cpc	r1, r27
     674:	94 f4       	brge	.+36     	; 0x69a <_Z13nextneighbourPA4_h5Point+0x38>
     676:	ad 01       	movw	r20, r26
     678:	41 50       	subi	r20, 0x01	; 1
     67a:	50 40       	sbci	r21, 0x00	; 0
     67c:	fb 01       	movw	r30, r22
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	e2 0f       	add	r30, r18
     688:	f3 1f       	adc	r31, r19
     68a:	e4 0f       	add	r30, r20
     68c:	f5 1f       	adc	r31, r21
     68e:	e0 81       	ld	r30, Z
     690:	e1 30       	cpi	r30, 0x01	; 1
     692:	19 f4       	brne	.+6      	; 0x69a <_Z13nextneighbourPA4_h5Point+0x38>
     694:	8b 01       	movw	r16, r22
     696:	9a 01       	movw	r18, r20
     698:	43 c0       	rjmp	.+134    	; 0x720 <_Z13nextneighbourPA4_h5Point+0xbe>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
     69a:	16 16       	cp	r1, r22
     69c:	17 06       	cpc	r1, r23
     69e:	94 f4       	brge	.+36     	; 0x6c4 <_Z13nextneighbourPA4_h5Point+0x62>
     6a0:	fb 01       	movw	r30, r22
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	e2 0f       	add	r30, r18
     6ae:	f3 1f       	adc	r31, r19
     6b0:	e8 0f       	add	r30, r24
     6b2:	f9 1f       	adc	r31, r25
     6b4:	40 81       	ld	r20, Z
     6b6:	41 30       	cpi	r20, 0x01	; 1
     6b8:	29 f4       	brne	.+10     	; 0x6c4 <_Z13nextneighbourPA4_h5Point+0x62>
     6ba:	8b 01       	movw	r16, r22
     6bc:	01 50       	subi	r16, 0x01	; 1
     6be:	10 40       	sbci	r17, 0x00	; 0
     6c0:	9c 01       	movw	r18, r24
     6c2:	2e c0       	rjmp	.+92     	; 0x720 <_Z13nextneighbourPA4_h5Point+0xbe>
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
     6c4:	62 30       	cpi	r22, 0x02	; 2
     6c6:	71 05       	cpc	r23, r1
     6c8:	94 f4       	brge	.+36     	; 0x6ee <_Z13nextneighbourPA4_h5Point+0x8c>
     6ca:	fb 01       	movw	r30, r22
     6cc:	31 96       	adiw	r30, 0x01	; 1
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	e2 0f       	add	r30, r18
     6d8:	f3 1f       	adc	r31, r19
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	40 81       	ld	r20, Z
     6e0:	41 30       	cpi	r20, 0x01	; 1
     6e2:	29 f4       	brne	.+10     	; 0x6ee <_Z13nextneighbourPA4_h5Point+0x8c>
     6e4:	8b 01       	movw	r16, r22
     6e6:	0f 5f       	subi	r16, 0xFF	; 255
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	9c 01       	movw	r18, r24
     6ec:	19 c0       	rjmp	.+50     	; 0x720 <_Z13nextneighbourPA4_h5Point+0xbe>
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	91 05       	cpc	r25, r1
     6f2:	9c f4       	brge	.+38     	; 0x71a <_Z13nextneighbourPA4_h5Point+0xb8>
     6f4:	ac 01       	movw	r20, r24
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	cb 01       	movw	r24, r22
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	82 0f       	add	r24, r18
     706:	93 1f       	adc	r25, r19
     708:	fc 01       	movw	r30, r24
     70a:	e4 0f       	add	r30, r20
     70c:	f5 1f       	adc	r31, r21
     70e:	80 81       	ld	r24, Z
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	19 f4       	brne	.+6      	; 0x71a <_Z13nextneighbourPA4_h5Point+0xb8>
     714:	8b 01       	movw	r16, r22
     716:	9a 01       	movw	r18, r20
     718:	03 c0       	rjmp	.+6      	; 0x720 <_Z13nextneighbourPA4_h5Point+0xbe>
	return Point(-1,-1);
     71a:	0f ef       	ldi	r16, 0xFF	; 255
     71c:	1f ef       	ldi	r17, 0xFF	; 255
     71e:	98 01       	movw	r18, r16
}
     720:	60 2f       	mov	r22, r16
     722:	71 2f       	mov	r23, r17
     724:	82 2f       	mov	r24, r18
     726:	93 2f       	mov	r25, r19
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <_Z35FloydWarshallWithPathReconstructionv>:
void  FloydWarshallWithPathReconstruction ()
{
     72e:	2f 92       	push	r2
     730:	3f 92       	push	r3
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	62 97       	sbiw	r28, 0x12	; 18
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61

	unsigned char address;
	unsigned char val[MAX_NODE_X][MAX_NODE_Y+1];
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     766:	0c e0       	ldi	r16, 0x0C	; 12
     768:	10 e0       	ldi	r17, 0x00	; 0
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
	{
		for(j=0;j<totalnodes;j++)
		{
			dist[i][j] =200;
     76a:	28 ec       	ldi	r18, 0xC8	; 200
     76c:	30 e0       	ldi	r19, 0x00	; 0
			next[i][j] = -1;
     76e:	4f ef       	ldi	r20, 0xFF	; 255
     770:	5f ef       	ldi	r21, 0xFF	; 255
     772:	0c c0       	rjmp	.+24     	; 0x78c <_Z35FloydWarshallWithPathReconstructionv+0x5e>
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
	{
		for(j=0;j<totalnodes;j++)
		{
			dist[i][j] =200;
     774:	2d 93       	st	X+, r18
     776:	3d 93       	st	X+, r19
			next[i][j] = -1;
     778:	41 93       	st	Z+, r20
     77a:	51 93       	st	Z+, r21
     77c:	01 97       	sbiw	r24, 0x01	; 1
	unsigned char address;
	unsigned char val[MAX_NODE_X][MAX_NODE_Y+1];
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
	{
		for(j=0;j<totalnodes;j++)
     77e:	d1 f7       	brne	.-12     	; 0x774 <_Z35FloydWarshallWithPathReconstructionv+0x46>
{

	unsigned char address;
	unsigned char val[MAX_NODE_X][MAX_NODE_Y+1];
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
     780:	6f 5f       	subi	r22, 0xFF	; 255
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	6c 30       	cpi	r22, 0x0C	; 12
     786:	71 05       	cpc	r23, r1
     788:	09 f4       	brne	.+2      	; 0x78c <_Z35FloydWarshallWithPathReconstructionv+0x5e>
     78a:	54 c0       	rjmp	.+168    	; 0x834 <_Z35FloydWarshallWithPathReconstructionv+0x106>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     78c:	fb 01       	movw	r30, r22
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	df 01       	movw	r26, r30
     794:	a6 0f       	add	r26, r22
     796:	b7 1f       	adc	r27, r23
     798:	aa 0f       	add	r26, r26
     79a:	bb 1f       	adc	r27, r27
     79c:	aa 0f       	add	r26, r26
     79e:	bb 1f       	adc	r27, r27
     7a0:	aa 0f       	add	r26, r26
     7a2:	bb 1f       	adc	r27, r27
     7a4:	ae 59       	subi	r26, 0x9E	; 158
     7a6:	bf 4f       	sbci	r27, 0xFF	; 255
     7a8:	e6 0f       	add	r30, r22
     7aa:	f7 1f       	adc	r31, r23
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	ee 57       	subi	r30, 0x7E	; 126
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	c8 01       	movw	r24, r16
     7be:	da cf       	rjmp	.-76     	; 0x774 <_Z35FloydWarshallWithPathReconstructionv+0x46>
{

	unsigned char address;
	unsigned char val[MAX_NODE_X][MAX_NODE_Y+1];
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
     7c0:	a2 5b       	subi	r26, 0xB2	; 178
     7c2:	bf 4f       	sbci	r27, 0xFF	; 255
	{
		for (j=0;j<MAX_NODE_Y+1;j++)
		{
			k=i+1;
			l=j;
			if(k>=0&&l>=0&&k<MAX_NODE_X&&l<MAX_NODE_Y+1)
     7c4:	55 23       	and	r21, r21
     7c6:	7c f0       	brlt	.+30     	; 0x7e6 <_Z35FloydWarshallWithPathReconstructionv+0xb8>
     7c8:	99 23       	and	r25, r25
     7ca:	6c f0       	brlt	.+26     	; 0x7e6 <_Z35FloydWarshallWithPathReconstructionv+0xb8>
     7cc:	43 30       	cpi	r20, 0x03	; 3
     7ce:	51 05       	cpc	r21, r1
     7d0:	54 f4       	brge	.+20     	; 0x7e6 <_Z35FloydWarshallWithPathReconstructionv+0xb8>
     7d2:	84 30       	cpi	r24, 0x04	; 4
     7d4:	91 05       	cpc	r25, r1
     7d6:	3c f4       	brge	.+14     	; 0x7e6 <_Z35FloydWarshallWithPathReconstructionv+0xb8>
			{
				dist[j*MAX_NODE_X +i][l*MAX_NODE_X+k]=1;
     7d8:	11 96       	adiw	r26, 0x01	; 1
     7da:	1c 93       	st	X, r17
     7dc:	0e 93       	st	-X, r16
				dist[l*MAX_NODE_X+k][j*MAX_NODE_X +i]=1;
     7de:	57 96       	adiw	r26, 0x17	; 23
     7e0:	1c 93       	st	X, r17
     7e2:	0e 93       	st	-X, r16
     7e4:	56 97       	sbiw	r26, 0x16	; 22
			}
			k=i;
			l=j+1;
     7e6:	01 96       	adiw	r24, 0x01	; 1
			if(k>=0&&l>=0&&k<MAX_NODE_X&&l<MAX_NODE_Y+1)
     7e8:	33 23       	and	r19, r19
     7ea:	94 f0       	brlt	.+36     	; 0x810 <_Z35FloydWarshallWithPathReconstructionv+0xe2>
     7ec:	99 23       	and	r25, r25
     7ee:	84 f0       	brlt	.+32     	; 0x810 <_Z35FloydWarshallWithPathReconstructionv+0xe2>
     7f0:	23 30       	cpi	r18, 0x03	; 3
     7f2:	31 05       	cpc	r19, r1
     7f4:	6c f4       	brge	.+26     	; 0x810 <_Z35FloydWarshallWithPathReconstructionv+0xe2>
     7f6:	84 30       	cpi	r24, 0x04	; 4
     7f8:	91 05       	cpc	r25, r1
     7fa:	6c f4       	brge	.+26     	; 0x816 <_Z35FloydWarshallWithPathReconstructionv+0xe8>
			{
				dist[j*MAX_NODE_X +i][l*MAX_NODE_X+k]=1;
     7fc:	15 96       	adiw	r26, 0x05	; 5
     7fe:	1c 93       	st	X, r17
     800:	0e 93       	st	-X, r16
     802:	14 97       	sbiw	r26, 0x04	; 4
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     804:	fd 01       	movw	r30, r26
     806:	ea 5b       	subi	r30, 0xBA	; 186
     808:	ff 4f       	sbci	r31, 0xFF	; 255
			k=i;
			l=j+1;
			if(k>=0&&l>=0&&k<MAX_NODE_X&&l<MAX_NODE_Y+1)
			{
				dist[j*MAX_NODE_X +i][l*MAX_NODE_X+k]=1;
				dist[l*MAX_NODE_X+k][j*MAX_NODE_X +i]=1;
     80a:	11 83       	std	Z+1, r17	; 0x01
     80c:	00 83       	st	Z, r16
     80e:	d8 cf       	rjmp	.-80     	; 0x7c0 <_Z35FloydWarshallWithPathReconstructionv+0x92>
			next[i][j] = -1;
		}
	}
	for(i=0;i<MAX_NODE_X;i++)  //initializing all dist to all adjacent node to 1;
	{
		for (j=0;j<MAX_NODE_Y+1;j++)
     810:	84 30       	cpi	r24, 0x04	; 4
     812:	91 05       	cpc	r25, r1
     814:	ac f2       	brlt	.-86     	; 0x7c0 <_Z35FloydWarshallWithPathReconstructionv+0x92>
		{
			dist[i][j] =200;
			next[i][j] = -1;
		}
	}
	for(i=0;i<MAX_NODE_X;i++)  //initializing all dist to all adjacent node to 1;
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	23 30       	cpi	r18, 0x03	; 3
     820:	31 05       	cpc	r19, r1
     822:	81 f4       	brne	.+32     	; 0x844 <_Z35FloydWarshallWithPathReconstructionv+0x116>
     824:	9e 01       	movw	r18, r28
     826:	2c 5f       	subi	r18, 0xFC	; 252
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	38 8b       	std	Y+16, r19	; 0x10
     82c:	2f 87       	std	Y+15, r18	; 0x0f
     82e:	22 24       	eor	r2, r2
     830:	33 24       	eor	r3, r3
     832:	a9 c0       	rjmp	.+338    	; 0x986 <__stack+0x127>
{

	unsigned char address;
	unsigned char val[MAX_NODE_X][MAX_NODE_Y+1];
	int i,j,k,l,totalnodes =(MAX_NODE_X)*(MAX_NODE_Y+1) ;
	for(i=0;i<totalnodes;i++)		//initializing dist = infinity and next node = -1
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     83c:	ee 24       	eor	r14, r14
     83e:	ff 24       	eor	r15, r15
		{
			k=i+1;
			l=j;
			if(k>=0&&l>=0&&k<MAX_NODE_X&&l<MAX_NODE_Y+1)
			{
				dist[j*MAX_NODE_X +i][l*MAX_NODE_X+k]=1;
     840:	01 e0       	ldi	r16, 0x01	; 1
     842:	10 e0       	ldi	r17, 0x00	; 0
     844:	ab 01       	movw	r20, r22
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     846:	c9 01       	movw	r24, r18
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	86 0f       	add	r24, r22
     85a:	97 1f       	adc	r25, r23
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	dc 01       	movw	r26, r24
     862:	ae 59       	subi	r26, 0x9E	; 158
     864:	bf 4f       	sbci	r27, 0xFF	; 255
     866:	c7 01       	movw	r24, r14
     868:	ad cf       	rjmp	.-166    	; 0x7c4 <_Z35FloydWarshallWithPathReconstructionv+0x96>
	}
	for(i=0;i<MAX_NODE_X;i++)			//for each black node , dist to adjecent node =200;
	{
		for (j=0;j<MAX_NODE_Y+1;j++)
		{
			if(j==MAX_NODE_Y)
     86a:	33 e0       	ldi	r19, 0x03	; 3
     86c:	e3 16       	cp	r14, r19
     86e:	f1 04       	cpc	r15, r1
     870:	61 f4       	brne	.+24     	; 0x88a <__stack+0x2b>
			{
				val[i][j]=0;
     872:	af 85       	ldd	r26, Y+15	; 0x0f
     874:	b8 89       	ldd	r27, Y+16	; 0x10
     876:	1c 92       	st	X, r1
				if(i==KEY_DEPOSITE_X)val[i][j]=1;
     878:	e9 89       	ldd	r30, Y+17	; 0x11
     87a:	fa 89       	ldd	r31, Y+18	; 0x12
     87c:	e2 30       	cpi	r30, 0x02	; 2
     87e:	f1 05       	cpc	r31, r1
     880:	49 f4       	brne	.+18     	; 0x894 <__stack+0x35>
     882:	1f 01       	movw	r2, r30
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	fc 87       	std	Y+12, r31	; 0x0c
     888:	72 c0       	rjmp	.+228    	; 0x96e <__stack+0x10f>
			}
			else
			{
				address = (j*MAX_NODE_X +i);
				val[i][j]=EEPROM_read(address);
     88a:	88 2d       	mov	r24, r8
     88c:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z11EEPROM_readh>
     890:	d5 01       	movw	r26, r10
     892:	8c 93       	st	X, r24
			}			
			if(val[i][j]==0)
     894:	f5 01       	movw	r30, r10
     896:	80 81       	ld	r24, Z
     898:	88 23       	and	r24, r24
     89a:	09 f0       	breq	.+2      	; 0x89e <__stack+0x3f>
     89c:	57 c0       	rjmp	.+174    	; 0x94c <__stack+0xed>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     89e:	4d 85       	ldd	r20, Y+13	; 0x0d
     8a0:	5e 85       	ldd	r21, Y+14	; 0x0e
				address = (j*MAX_NODE_X +i);
				val[i][j]=EEPROM_read(address);
			}			
			if(val[i][j]==0)
			{
				for(k=i-1;k<=i+1;k++)
     8a2:	44 16       	cp	r4, r20
     8a4:	55 06       	cpc	r5, r21
     8a6:	0c f4       	brge	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	51 c0       	rjmp	.+162    	; 0x94c <__stack+0xed>
				{
					for(l=j-1;l<=j+1;l++)
					{
						if(k>=0&&l>=0&&k<MAX_NODE_X&&l<MAX_NODE_Y+1)
						{
							dist[j*MAX_NODE_X +i][l*MAX_NODE_X+k]=200;
     8aa:	34 01       	movw	r6, r8
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     8ac:	b4 01       	movw	r22, r8
     8ae:	64 50       	subi	r22, 0x04	; 4
     8b0:	70 40       	sbci	r23, 0x00	; 0
     8b2:	67 01       	movw	r12, r14
     8b4:	08 94       	sec
     8b6:	c1 08       	sbc	r12, r1
     8b8:	d1 08       	sbc	r13, r1
     8ba:	87 01       	movw	r16, r14
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	c4 01       	movw	r24, r8
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	88 0d       	add	r24, r8
     8c8:	99 1d       	adc	r25, r9
     8ca:	1c 01       	movw	r2, r24
     8cc:	22 0c       	add	r2, r2
     8ce:	33 1c       	adc	r3, r3
     8d0:	22 0c       	add	r2, r2
     8d2:	33 1c       	adc	r3, r3
     8d4:	96 01       	movw	r18, r12
			}			
			if(val[i][j]==0)
			{
				for(k=i-1;k<=i+1;k++)
				{
					for(l=j-1;l<=j+1;l++)
     8d6:	0c 15       	cp	r16, r12
     8d8:	1d 05       	cpc	r17, r13
     8da:	8c f1       	brlt	.+98     	; 0x93e <__stack+0xdf>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     8dc:	c1 01       	movw	r24, r2
     8de:	86 0f       	add	r24, r22
     8e0:	97 1f       	adc	r25, r23
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	dc 01       	movw	r26, r24
     8e8:	ae 59       	subi	r26, 0x9E	; 158
     8ea:	bf 4f       	sbci	r27, 0xFF	; 255
     8ec:	cb 01       	movw	r24, r22
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	86 0f       	add	r24, r22
     8f4:	97 1f       	adc	r25, r23
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	86 0d       	add	r24, r6
     900:	97 1d       	adc	r25, r7
     902:	fc 01       	movw	r30, r24
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 59       	subi	r30, 0x9E	; 158
     90a:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				for(k=i-1;k<=i+1;k++)
				{
					for(l=j-1;l<=j+1;l++)
					{
						if(k>=0&&l>=0&&k<MAX_NODE_X&&l<MAX_NODE_Y+1)
     90c:	55 23       	and	r21, r21
     90e:	7c f0       	brlt	.+30     	; 0x92e <__stack+0xcf>
     910:	33 23       	and	r19, r19
     912:	6c f0       	brlt	.+26     	; 0x92e <__stack+0xcf>
     914:	43 30       	cpi	r20, 0x03	; 3
     916:	51 05       	cpc	r21, r1
     918:	54 f4       	brge	.+20     	; 0x92e <__stack+0xcf>
     91a:	24 30       	cpi	r18, 0x04	; 4
     91c:	31 05       	cpc	r19, r1
     91e:	3c f4       	brge	.+14     	; 0x92e <__stack+0xcf>
						{
							dist[j*MAX_NODE_X +i][l*MAX_NODE_X+k]=200;
     920:	88 ec       	ldi	r24, 0xC8	; 200
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	9c 93       	st	X, r25
     928:	8e 93       	st	-X, r24
							dist[l*MAX_NODE_X+k][j*MAX_NODE_X +i]=200;
     92a:	91 83       	std	Z+1, r25	; 0x01
     92c:	80 83       	st	Z, r24
			}			
			if(val[i][j]==0)
			{
				for(k=i-1;k<=i+1;k++)
				{
					for(l=j-1;l<=j+1;l++)
     92e:	2f 5f       	subi	r18, 0xFF	; 255
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	16 96       	adiw	r26, 0x06	; 6
     934:	e8 5b       	subi	r30, 0xB8	; 184
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	02 17       	cp	r16, r18
     93a:	13 07       	cpc	r17, r19
     93c:	3c f7       	brge	.-50     	; 0x90c <__stack+0xad>
				address = (j*MAX_NODE_X +i);
				val[i][j]=EEPROM_read(address);
			}			
			if(val[i][j]==0)
			{
				for(k=i-1;k<=i+1;k++)
     93e:	4f 5f       	subi	r20, 0xFF	; 255
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	44 16       	cp	r4, r20
     948:	55 06       	cpc	r5, r21
     94a:	24 f6       	brge	.-120    	; 0x8d4 <__stack+0x75>
			
		}
	}
	for(i=0;i<MAX_NODE_X;i++)			//for each black node , dist to adjecent node =200;
	{
		for (j=0;j<MAX_NODE_Y+1;j++)
     94c:	08 94       	sec
     94e:	e1 1c       	adc	r14, r1
     950:	f1 1c       	adc	r15, r1
     952:	08 94       	sec
     954:	a1 1c       	adc	r10, r1
     956:	b1 1c       	adc	r11, r1
     958:	a3 e0       	ldi	r26, 0x03	; 3
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	8a 0e       	add	r8, r26
     95e:	9b 1e       	adc	r9, r27
     960:	b4 e0       	ldi	r27, 0x04	; 4
     962:	eb 16       	cp	r14, r27
     964:	f1 04       	cpc	r15, r1
     966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x10b>
     968:	80 cf       	rjmp	.-256    	; 0x86a <__stack+0xb>
     96a:	29 88       	ldd	r2, Y+17	; 0x11
     96c:	3a 88       	ldd	r3, Y+18	; 0x12
			
			
			
		}
	}
	for(i=0;i<MAX_NODE_X;i++)			//for each black node , dist to adjecent node =200;
     96e:	08 94       	sec
     970:	21 1c       	adc	r2, r1
     972:	31 1c       	adc	r3, r1
     974:	ef 85       	ldd	r30, Y+15	; 0x0f
     976:	f8 89       	ldd	r31, Y+16	; 0x10
     978:	34 96       	adiw	r30, 0x04	; 4
     97a:	f8 8b       	std	Y+16, r31	; 0x10
     97c:	ef 87       	std	Y+15, r30	; 0x0f
     97e:	f3 e0       	ldi	r31, 0x03	; 3
     980:	2f 16       	cp	r2, r31
     982:	31 04       	cpc	r3, r1
     984:	d1 f0       	breq	.+52     	; 0x9ba <__stack+0x15b>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     986:	51 01       	movw	r10, r2
     988:	aa 0c       	add	r10, r10
     98a:	bb 1c       	adc	r11, r11
     98c:	aa 0c       	add	r10, r10
     98e:	bb 1c       	adc	r11, r11
     990:	21 e0       	ldi	r18, 0x01	; 1
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	2c 0f       	add	r18, r28
     996:	3d 1f       	adc	r19, r29
     998:	a2 0e       	add	r10, r18
     99a:	b3 1e       	adc	r11, r19
     99c:	41 01       	movw	r8, r2
     99e:	ee 24       	eor	r14, r14
     9a0:	ff 24       	eor	r15, r15
     9a2:	b1 01       	movw	r22, r2
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	70 40       	sbci	r23, 0x00	; 0
     9a8:	7e 87       	std	Y+14, r23	; 0x0e
     9aa:	6d 87       	std	Y+13, r22	; 0x0d
     9ac:	21 01       	movw	r4, r2
     9ae:	08 94       	sec
     9b0:	41 1c       	adc	r4, r1
     9b2:	51 1c       	adc	r5, r1
     9b4:	3a 8a       	std	Y+18, r3	; 0x12
     9b6:	29 8a       	std	Y+17, r2	; 0x11
     9b8:	58 cf       	rjmp	.-336    	; 0x86a <__stack+0xb>
			
			
			
		}
	}
	for(i=0;i<MAX_NODE_X;i++)			//for each black node , dist to adjecent node =200;
     9ba:	e2 e6       	ldi	r30, 0x62	; 98
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     9be:	8f 01       	movw	r16, r30
     9c0:	8a e9       	ldi	r24, 0x9A	; 154
     9c2:	91 e0       	ldi	r25, 0x01	; 1
					}
				}
			}
		}
	}
	for(i=0;i<totalnodes;i++) dist[i][i]=0;
     9c4:	11 82       	std	Z+1, r1	; 0x01
     9c6:	10 82       	st	Z, r1
     9c8:	7a 96       	adiw	r30, 0x1a	; 26
     9ca:	e8 17       	cp	r30, r24
     9cc:	f9 07       	cpc	r31, r25
     9ce:	d1 f7       	brne	.-12     	; 0x9c4 <__stack+0x165>
     9d0:	08 5e       	subi	r16, 0xE8	; 232
     9d2:	1f 4f       	sbci	r17, 0xFF	; 255
     9d4:	ee 24       	eor	r14, r14
     9d6:	ff 24       	eor	r15, r15
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     9d8:	88 24       	eor	r8, r8
     9da:	99 24       	eor	r9, r9
     9dc:	51 c0       	rjmp	.+162    	; 0xa80 <__stack+0x221>
	{
		for(i=0;i<totalnodes;i++)
		{
			for(j=0;j<totalnodes;j++)
			{
				if( dist[i][k] + dist[k][j] < dist[i][j])
     9de:	da 01       	movw	r26, r20
     9e0:	8d 91       	ld	r24, X+
     9e2:	9d 91       	ld	r25, X+
     9e4:	ad 01       	movw	r20, r26
     9e6:	db 01       	movw	r26, r22
     9e8:	2d 91       	ld	r18, X+
     9ea:	3c 91       	ld	r19, X
     9ec:	11 97       	sbiw	r26, 0x01	; 1
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	20 81       	ld	r18, Z
     9f4:	31 81       	ldd	r19, Z+1	; 0x01
     9f6:	82 17       	cp	r24, r18
     9f8:	93 07       	cpc	r25, r19
     9fa:	34 f4       	brge	.+12     	; 0xa08 <__stack+0x1a9>
				{
					dist[i][j] = dist[i][k] + dist[k][j];
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
					next[i][j] = k;
     a00:	d3 01       	movw	r26, r6
     a02:	11 96       	adiw	r26, 0x01	; 1
     a04:	fc 92       	st	X, r15
     a06:	ee 92       	st	-X, r14
     a08:	32 96       	adiw	r30, 0x02	; 2
     a0a:	22 e0       	ldi	r18, 0x02	; 2
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	62 0e       	add	r6, r18
     a10:	73 1e       	adc	r7, r19
	//}
	for(k=0;k<totalnodes;k++)
	{
		for(i=0;i<totalnodes;i++)
		{
			for(j=0;j<totalnodes;j++)
     a12:	04 17       	cp	r16, r20
     a14:	15 07       	cpc	r17, r21
     a16:	19 f7       	brne	.-58     	; 0x9de <__stack+0x17f>
		//	}
		//	printf("\n");
	//}
	for(k=0;k<totalnodes;k++)
	{
		for(i=0;i<totalnodes;i++)
     a18:	08 94       	sec
     a1a:	c1 1c       	adc	r12, r1
     a1c:	d1 1c       	adc	r13, r1
     a1e:	68 5e       	subi	r22, 0xE8	; 232
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	3c e0       	ldi	r19, 0x0C	; 12
     a24:	c3 16       	cp	r12, r19
     a26:	d1 04       	cpc	r13, r1
     a28:	11 f1       	breq	.+68     	; 0xa6e <__stack+0x20f>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     a2a:	a5 01       	movw	r20, r10
     a2c:	96 01       	movw	r18, r12
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	c9 01       	movw	r24, r18
     a34:	8c 0d       	add	r24, r12
     a36:	9d 1d       	adc	r25, r13
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	fc 01       	movw	r30, r24
     a46:	ee 59       	subi	r30, 0x9E	; 158
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	c9 01       	movw	r24, r18
     a4c:	8c 0d       	add	r24, r12
     a4e:	9d 1d       	adc	r25, r13
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f2 e8       	ldi	r31, 0x82	; 130
     a60:	6f 2e       	mov	r6, r31
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	7f 2e       	mov	r7, r31
     a66:	f0 2d       	mov	r31, r0
     a68:	68 0e       	add	r6, r24
     a6a:	79 1e       	adc	r7, r25
     a6c:	b8 cf       	rjmp	.-144    	; 0x9de <__stack+0x17f>
		//	{
			//		printf("%d\t",dist[k][i]);
		//	}
		//	printf("\n");
	//}
	for(k=0;k<totalnodes;k++)
     a6e:	08 94       	sec
     a70:	e1 1c       	adc	r14, r1
     a72:	f1 1c       	adc	r15, r1
     a74:	08 5e       	subi	r16, 0xE8	; 232
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	6c e0       	ldi	r22, 0x0C	; 12
     a7a:	e6 16       	cp	r14, r22
     a7c:	f1 04       	cpc	r15, r1
     a7e:	d1 f0       	breq	.+52     	; 0xab4 <__stack+0x255>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     a80:	b7 01       	movw	r22, r14
     a82:	66 0f       	add	r22, r22
     a84:	77 1f       	adc	r23, r23
     a86:	6e 59       	subi	r22, 0x9E	; 158
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	64 01       	movw	r12, r8
     a8c:	c7 01       	movw	r24, r14
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	8e 0d       	add	r24, r14
     a94:	9f 1d       	adc	r25, r15
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	0f 2e       	mov	r0, r31
     aa4:	f2 e6       	ldi	r31, 0x62	; 98
     aa6:	af 2e       	mov	r10, r31
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	bf 2e       	mov	r11, r31
     aac:	f0 2d       	mov	r31, r0
     aae:	a8 0e       	add	r10, r24
     ab0:	b9 1e       	adc	r11, r25
     ab2:	bb cf       	rjmp	.-138    	; 0xa2a <__stack+0x1cb>
		//	{
			//		printf("%d\t",dist[k][i]);
		//	}
		//	printf("\n");
	//}
	maxpts=0;
     ab4:	10 92 61 00 	sts	0x0061, r1
     ab8:	10 92 60 00 	sts	0x0060, r1

class Point
{
	public:
	int x, y;
Point(int x, int y): x(x), y(y) {}
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
	{
			goalArr[maxpts]=toadd;
			maxpts++;
			val[toadd.x][toadd.y]=0;
			toadd = nextneighbour(val,toadd);
			if(toadd.x==-1)
     ac4:	66 24       	eor	r6, r6
     ac6:	77 24       	eor	r7, r7
				flag=1;
				for (i=0;i<MAX_NODE_X;i++)
				{
					for (j=0;j<MAX_NODE_Y;j++)
					{
					if(val[i][j]==1) {flag=2; break;}
     ac8:	44 24       	eor	r4, r4
     aca:	68 94       	set
     acc:	41 f8       	bld	r4, 1
			}
		}
		if(flag==2)
		{
			for(i=maxpts-1;i>=0;i--)
			if(nextneighbour(val,goalArr[i]).x!=-1)
     ace:	0f 2e       	mov	r0, r31
     ad0:	ff eb       	ldi	r31, 0xBF	; 191
     ad2:	ef 2e       	mov	r14, r31
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	ff 2e       	mov	r15, r31
     ad8:	f0 2d       	mov	r31, r0
	{
			goalArr[maxpts]=toadd;
			maxpts++;
			val[toadd.x][toadd.y]=0;
			toadd = nextneighbour(val,toadd);
			if(toadd.x==-1)
     ada:	22 24       	eor	r2, r2
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <__stack+0x285>
	//}
	maxpts=0;
	Point toadd(0,0);
	//bool visited[MAX_NODE_X][MAX_NODE_Y];
	char flag =0;
	do
     ade:	28 2d       	mov	r18, r8
     ae0:	3a 2d       	mov	r19, r10
     ae2:	ab 01       	movw	r20, r22
	{
			goalArr[maxpts]=toadd;
     ae4:	00 91 60 00 	lds	r16, 0x0060
     ae8:	10 91 61 00 	lds	r17, 0x0061
     aec:	f8 01       	movw	r30, r16
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	e1 54       	subi	r30, 0x41	; 65
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	51 83       	std	Z+1, r21	; 0x01
     afc:	40 83       	st	Z, r20
     afe:	33 83       	std	Z+3, r19	; 0x03
     b00:	22 83       	std	Z+2, r18	; 0x02
			maxpts++;
     b02:	c8 01       	movw	r24, r16
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	90 93 61 00 	sts	0x0061, r25
     b0a:	80 93 60 00 	sts	0x0060, r24
			val[toadd.x][toadd.y]=0;
     b0e:	ca 01       	movw	r24, r20
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	82 0f       	add	r24, r18
     b1a:	93 1f       	adc	r25, r19
     b1c:	a1 e0       	ldi	r26, 0x01	; 1
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	ac 0f       	add	r26, r28
     b22:	bd 1f       	adc	r27, r29
     b24:	8a 0f       	add	r24, r26
     b26:	9b 1f       	adc	r25, r27
     b28:	fc 01       	movw	r30, r24
     b2a:	10 82       	st	Z, r1
			toadd = nextneighbour(val,toadd);
     b2c:	c9 01       	movw	r24, r18
     b2e:	32 2f       	mov	r19, r18
     b30:	29 2f       	mov	r18, r25
     b32:	cd 01       	movw	r24, r26
     b34:	63 2f       	mov	r22, r19
     b36:	72 2f       	mov	r23, r18
     b38:	0e 94 31 03 	call	0x662	; 0x662 <_Z13nextneighbourPA4_h5Point>
     b3c:	88 2e       	mov	r8, r24
     b3e:	a9 2e       	mov	r10, r25
			if(toadd.x==-1)
     b40:	ff ef       	ldi	r31, 0xFF	; 255
     b42:	6f 3f       	cpi	r22, 0xFF	; 255
     b44:	7f 07       	cpc	r23, r31
     b46:	09 f0       	breq	.+2      	; 0xb4a <__stack+0x2eb>
     b48:	59 c0       	rjmp	.+178    	; 0xbfc <__stack+0x39d>
     b4a:	9e 01       	movw	r18, r28
     b4c:	2d 5f       	subi	r18, 0xFD	; 253
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	cc 24       	eor	r12, r12
     b52:	c3 94       	inc	r12
     b54:	a3 01       	movw	r20, r6
     b56:	0c c0       	rjmp	.+24     	; 0xb70 <__stack+0x311>
				flag=1;
				for (i=0;i<MAX_NODE_X;i++)
				{
					for (j=0;j<MAX_NODE_Y;j++)
					{
					if(val[i][j]==1) {flag=2; break;}
     b58:	c4 2c       	mov	r12, r4
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__stack+0x303>
     b5c:	c4 2c       	mov	r12, r4
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <__stack+0x303>
     b60:	c4 2c       	mov	r12, r4
			val[toadd.x][toadd.y]=0;
			toadd = nextneighbour(val,toadd);
			if(toadd.x==-1)
			{
				flag=1;
				for (i=0;i<MAX_NODE_X;i++)
     b62:	4f 5f       	subi	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	2c 5f       	subi	r18, 0xFC	; 252
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	43 30       	cpi	r20, 0x03	; 3
     b6c:	51 05       	cpc	r21, r1
     b6e:	c9 f0       	breq	.+50     	; 0xba2 <__stack+0x343>
	if(i>0)	if(val[i-1][j]==1) return Point(i-1,j);
	if(i<MAX_NODE_X-1)	if(val[i+1][j]==1) return Point(i+1,j);
	if(j<MAX_NODE_Y-1)	if(val[i][j+1]==1) return Point(i,j+1);
	return Point(-1,-1);
}
void  FloydWarshallWithPathReconstruction ()
     b70:	d9 01       	movw	r26, r18
     b72:	f9 01       	movw	r30, r18
     b74:	32 97       	sbiw	r30, 0x02	; 2
				flag=1;
				for (i=0;i<MAX_NODE_X;i++)
				{
					for (j=0;j<MAX_NODE_Y;j++)
					{
					if(val[i][j]==1) {flag=2; break;}
     b76:	80 81       	ld	r24, Z
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	71 f3       	breq	.-36     	; 0xb58 <__stack+0x2f9>
     b7c:	ca 01       	movw	r24, r20
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	e1 e0       	ldi	r30, 0x01	; 1
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	ec 0f       	add	r30, r28
     b8c:	fd 1f       	adc	r31, r29
     b8e:	8e 0f       	add	r24, r30
     b90:	9f 1f       	adc	r25, r31
     b92:	fc 01       	movw	r30, r24
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	09 f3       	breq	.-62     	; 0xb5c <__stack+0x2fd>
     b9a:	8c 91       	ld	r24, X
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	09 f7       	brne	.-62     	; 0xb62 <__stack+0x303>
     ba0:	df cf       	rjmp	.-66     	; 0xb60 <__stack+0x301>
				}
			}
		}
		if(flag==2)
     ba2:	f2 e0       	ldi	r31, 0x02	; 2
     ba4:	cf 16       	cp	r12, r31
     ba6:	59 f5       	brne	.+86     	; 0xbfe <__stack+0x39f>
		{
			for(i=maxpts-1;i>=0;i--)
     ba8:	11 23       	and	r17, r17
     baa:	64 f1       	brlt	.+88     	; 0xc04 <__stack+0x3a5>
			if(nextneighbour(val,goalArr[i]).x!=-1)
     bac:	f8 01       	movw	r30, r16
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ee 0d       	add	r30, r14
     bb8:	ff 1d       	adc	r31, r15
     bba:	40 81       	ld	r20, Z
     bbc:	51 81       	ldd	r21, Z+1	; 0x01
     bbe:	62 81       	ldd	r22, Z+2	; 0x02
     bc0:	73 81       	ldd	r23, Z+3	; 0x03
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	0e 94 31 03 	call	0x662	; 0x662 <_Z13nextneighbourPA4_h5Point>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	2f ef       	ldi	r18, 0xFF	; 255
     bd0:	8f 3f       	cpi	r24, 0xFF	; 255
     bd2:	92 07       	cpc	r25, r18
     bd4:	61 f0       	breq	.+24     	; 0xbee <__stack+0x38f>
			{
				toadd=goalArr[i];
     bd6:	00 0f       	add	r16, r16
     bd8:	11 1f       	adc	r17, r17
     bda:	00 0f       	add	r16, r16
     bdc:	11 1f       	adc	r17, r17
     bde:	f8 01       	movw	r30, r16
     be0:	e1 54       	subi	r30, 0x41	; 65
     be2:	fd 4f       	sbci	r31, 0xFD	; 253
     be4:	22 81       	ldd	r18, Z+2	; 0x02
     be6:	33 81       	ldd	r19, Z+3	; 0x03
     be8:	40 81       	ld	r20, Z
     bea:	51 81       	ldd	r21, Z+1	; 0x01
     bec:	7b cf       	rjmp	.-266    	; 0xae4 <__stack+0x285>
				}
			}
		}
		if(flag==2)
		{
			for(i=maxpts-1;i>=0;i--)
     bee:	01 50       	subi	r16, 0x01	; 1
     bf0:	10 40       	sbci	r17, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	0f 3f       	cpi	r16, 0xFF	; 255
     bf6:	13 07       	cpc	r17, r19
     bf8:	c9 f6       	brne	.-78     	; 0xbac <__stack+0x34d>
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <__stack+0x3a5>
	{
			goalArr[maxpts]=toadd;
			maxpts++;
			val[toadd.x][toadd.y]=0;
			toadd = nextneighbour(val,toadd);
			if(toadd.x==-1)
     bfc:	c2 2c       	mov	r12, r2
	//}
	maxpts=0;
	Point toadd(0,0);
	//bool visited[MAX_NODE_X][MAX_NODE_Y];
	char flag =0;
	do
     bfe:	cc 20       	and	r12, r12
     c00:	09 f4       	brne	.+2      	; 0xc04 <__stack+0x3a5>
     c02:	6d cf       	rjmp	.-294    	; 0xade <__stack+0x27f>
				flag=0;
				break;
			}
		}
	}while(flag==0);
}
     c04:	62 96       	adiw	r28, 0x12	; 18
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	08 95       	ret

00000c36 <_Z9nextPoint5PointS_>:
Point nextPoint(Point cP, Point gP)
{
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	6b 01       	movw	r12, r22
     c48:	7c 01       	movw	r14, r24
     c4a:	da 01       	movw	r26, r20
     c4c:	c9 01       	movw	r24, r18
     c4e:	f6 01       	movw	r30, r12
     c50:	a7 01       	movw	r20, r14
     c52:	8c 01       	movw	r16, r24
	if(dist[MAX_NODE_X*cP.y + cP.x][MAX_NODE_X*gP.y + gP.x]>190) return cP;
     c54:	97 01       	movw	r18, r14
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	2e 0d       	add	r18, r14
     c5c:	3f 1d       	adc	r19, r15
     c5e:	2c 0d       	add	r18, r12
     c60:	3d 1d       	adc	r19, r13
     c62:	cd 01       	movw	r24, r26
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	8a 0f       	add	r24, r26
     c6a:	9b 1f       	adc	r25, r27
     c6c:	bc 01       	movw	r22, r24
     c6e:	60 0f       	add	r22, r16
     c70:	71 1f       	adc	r23, r17
     c72:	c9 01       	movw	r24, r18
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	82 0f       	add	r24, r18
     c7a:	93 1f       	adc	r25, r19
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	86 0f       	add	r24, r22
     c86:	97 1f       	adc	r25, r23
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	8e 59       	subi	r24, 0x9E	; 158
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	ec 01       	movw	r28, r24
     c92:	88 81       	ld	r24, Y
     c94:	99 81       	ldd	r25, Y+1	; 0x01
     c96:	8f 3b       	cpi	r24, 0xBF	; 191
     c98:	91 05       	cpc	r25, r1
     c9a:	2c f0       	brlt	.+10     	; 0xca6 <_Z9nextPoint5PointS_+0x70>
     c9c:	6c 2d       	mov	r22, r12
     c9e:	7f 2f       	mov	r23, r31
     ca0:	8e 2d       	mov	r24, r14
     ca2:	95 2f       	mov	r25, r21
     ca4:	26 c0       	rjmp	.+76     	; 0xcf2 <_Z9nextPoint5PointS_+0xbc>
	int intermediate = next[MAX_NODE_X*cP.y + cP.x][MAX_NODE_X*gP.y + gP.x];
     ca6:	c9 01       	movw	r24, r18
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	82 0f       	add	r24, r18
     cae:	93 1f       	adc	r25, r19
     cb0:	fc 01       	movw	r30, r24
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	6e 0f       	add	r22, r30
     cbc:	7f 1f       	adc	r23, r31
     cbe:	fb 01       	movw	r30, r22
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	ee 57       	subi	r30, 0x7E	; 126
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
	if (intermediate==-1) return gP;
     ccc:	df ef       	ldi	r29, 0xFF	; 255
     cce:	8f 3f       	cpi	r24, 0xFF	; 255
     cd0:	9d 07       	cpc	r25, r29
     cd2:	29 f4       	brne	.+10     	; 0xcde <_Z9nextPoint5PointS_+0xa8>
     cd4:	60 2f       	mov	r22, r16
     cd6:	71 2f       	mov	r23, r17
     cd8:	8a 2f       	mov	r24, r26
     cda:	9b 2f       	mov	r25, r27
     cdc:	0a c0       	rjmp	.+20     	; 0xcf2 <_Z9nextPoint5PointS_+0xbc>
	Point temp(intermediate%MAX_NODE_X,intermediate/MAX_NODE_X);
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	0e 94 cc 09 	call	0x1398	; 0x1398 <__divmodhi4>
     ce6:	9c 01       	movw	r18, r24
     ce8:	ab 01       	movw	r20, r22
	return nextPoint(cP,temp);
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z9nextPoint5PointS_>
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	08 95       	ret

00000d04 <_Z6getComv>:
enum Command getCom()
{
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	2f ef       	ldi	r18, 0xFF	; 255
     d0c:	33 ed       	ldi	r19, 0xD3	; 211
     d0e:	40 e3       	ldi	r20, 0x30	; 48
     d10:	21 50       	subi	r18, 0x01	; 1
     d12:	30 40       	sbci	r19, 0x00	; 0
     d14:	40 40       	sbci	r20, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <_Z6getComv+0xc>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <_Z6getComv+0x16>
     d1a:	00 00       	nop
	_delay_ms(1000);
	switch(skillState)
     d1c:	80 91 b6 02 	lds	r24, 0x02B6
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	09 f4       	brne	.+2      	; 0xd26 <_Z6getComv+0x22>
     d24:	4f c0       	rjmp	.+158    	; 0xdc4 <_Z6getComv+0xc0>
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	30 f4       	brcc	.+12     	; 0xd36 <_Z6getComv+0x32>
     d2a:	88 23       	and	r24, r24
     d2c:	59 f0       	breq	.+22     	; 0xd44 <_Z6getComv+0x40>
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	09 f0       	breq	.+2      	; 0xd34 <_Z6getComv+0x30>
     d32:	ae c0       	rjmp	.+348    	; 0xe90 <_Z6getComv+0x18c>
     d34:	1f c0       	rjmp	.+62     	; 0xd74 <_Z6getComv+0x70>
     d36:	83 30       	cpi	r24, 0x03	; 3
     d38:	09 f4       	brne	.+2      	; 0xd3c <_Z6getComv+0x38>
     d3a:	66 c0       	rjmp	.+204    	; 0xe08 <_Z6getComv+0x104>
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	09 f0       	breq	.+2      	; 0xd42 <_Z6getComv+0x3e>
     d40:	a7 c0       	rjmp	.+334    	; 0xe90 <_Z6getComv+0x18c>
     d42:	84 c0       	rjmp	.+264    	; 0xe4c <_Z6getComv+0x148>
	{
		
		case DRYRUN:
		{
			writeNodeColour();
     d44:	0e 94 0c 03 	call	0x618	; 0x618 <_Z15writeNodeColourv>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	93 ed       	ldi	r25, 0xD3	; 211
     d4c:	a0 e3       	ldi	r26, 0x30	; 48
     d4e:	81 50       	subi	r24, 0x01	; 1
     d50:	90 40       	sbci	r25, 0x00	; 0
     d52:	a0 40       	sbci	r26, 0x00	; 0
     d54:	e1 f7       	brne	.-8      	; 0xd4e <_Z6getComv+0x4a>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <_Z6getComv+0x54>
     d58:	00 00       	nop
			_delay_ms(1000);
			return pathPlannerDryRun(curPoint, curDir);
     d5a:	60 91 b9 02 	lds	r22, 0x02B9
     d5e:	70 91 ba 02 	lds	r23, 0x02BA
     d62:	80 91 bb 02 	lds	r24, 0x02BB
     d66:	90 91 bc 02 	lds	r25, 0x02BC
     d6a:	40 91 b8 02 	lds	r20, 0x02B8
     d6e:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z17pathPlannerDryRun5Point9Direction>
     d72:	9c c0       	rjmp	.+312    	; 0xeac <_Z6getComv+0x1a8>
		}
		case FINDINTRUDER:
		{
			return pathPlanner(curPoint, curDir, nextPoint(curPoint,goalArr[curGoalIndex]));
     d74:	c0 91 b8 02 	lds	r28, 0x02B8
     d78:	60 91 b9 02 	lds	r22, 0x02B9
     d7c:	70 91 ba 02 	lds	r23, 0x02BA
     d80:	80 91 bb 02 	lds	r24, 0x02BB
     d84:	90 91 bc 02 	lds	r25, 0x02BC
     d88:	e0 91 bd 02 	lds	r30, 0x02BD
     d8c:	f0 91 be 02 	lds	r31, 0x02BE
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e1 54       	subi	r30, 0x41	; 65
     d9a:	fd 4f       	sbci	r31, 0xFD	; 253
     d9c:	20 81       	ld	r18, Z
     d9e:	31 81       	ldd	r19, Z+1	; 0x01
     da0:	42 81       	ldd	r20, Z+2	; 0x02
     da2:	53 81       	ldd	r21, Z+3	; 0x03
     da4:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z9nextPoint5PointS_>
     da8:	8b 01       	movw	r16, r22
     daa:	9c 01       	movw	r18, r24
     dac:	60 91 b9 02 	lds	r22, 0x02B9
     db0:	70 91 ba 02 	lds	r23, 0x02BA
     db4:	80 91 bb 02 	lds	r24, 0x02BB
     db8:	90 91 bc 02 	lds	r25, 0x02BC
     dbc:	4c 2f       	mov	r20, r28
     dbe:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z11pathPlanner5Point9DirectionS_>
     dc2:	74 c0       	rjmp	.+232    	; 0xeac <_Z6getComv+0x1a8>
		}
		case CARRYINTRUDER:
		{
			return pathPlanner(curPoint, curDir, nextPoint(curPoint,intruderDepositePoint));
     dc4:	c0 91 b8 02 	lds	r28, 0x02B8
     dc8:	60 91 b9 02 	lds	r22, 0x02B9
     dcc:	70 91 ba 02 	lds	r23, 0x02BA
     dd0:	80 91 bb 02 	lds	r24, 0x02BB
     dd4:	90 91 bc 02 	lds	r25, 0x02BC
     dd8:	20 91 aa 02 	lds	r18, 0x02AA
     ddc:	30 91 ab 02 	lds	r19, 0x02AB
     de0:	40 91 ac 02 	lds	r20, 0x02AC
     de4:	50 91 ad 02 	lds	r21, 0x02AD
     de8:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z9nextPoint5PointS_>
     dec:	8b 01       	movw	r16, r22
     dee:	9c 01       	movw	r18, r24
     df0:	60 91 b9 02 	lds	r22, 0x02B9
     df4:	70 91 ba 02 	lds	r23, 0x02BA
     df8:	80 91 bb 02 	lds	r24, 0x02BB
     dfc:	90 91 bc 02 	lds	r25, 0x02BC
     e00:	4c 2f       	mov	r20, r28
     e02:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z11pathPlanner5Point9DirectionS_>
     e06:	52 c0       	rjmp	.+164    	; 0xeac <_Z6getComv+0x1a8>
		}
		case GOTOKEY:
		{
			return pathPlanner(curPoint, curDir, nextPoint(curPoint,keyPickPoint));
     e08:	c0 91 b8 02 	lds	r28, 0x02B8
     e0c:	60 91 b9 02 	lds	r22, 0x02B9
     e10:	70 91 ba 02 	lds	r23, 0x02BA
     e14:	80 91 bb 02 	lds	r24, 0x02BB
     e18:	90 91 bc 02 	lds	r25, 0x02BC
     e1c:	20 91 a6 02 	lds	r18, 0x02A6
     e20:	30 91 a7 02 	lds	r19, 0x02A7
     e24:	40 91 a8 02 	lds	r20, 0x02A8
     e28:	50 91 a9 02 	lds	r21, 0x02A9
     e2c:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z9nextPoint5PointS_>
     e30:	8b 01       	movw	r16, r22
     e32:	9c 01       	movw	r18, r24
     e34:	60 91 b9 02 	lds	r22, 0x02B9
     e38:	70 91 ba 02 	lds	r23, 0x02BA
     e3c:	80 91 bb 02 	lds	r24, 0x02BB
     e40:	90 91 bc 02 	lds	r25, 0x02BC
     e44:	4c 2f       	mov	r20, r28
     e46:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z11pathPlanner5Point9DirectionS_>
     e4a:	30 c0       	rjmp	.+96     	; 0xeac <_Z6getComv+0x1a8>
		}
		case CARRYKEY:
		{
			return pathPlanner(curPoint, curDir, nextPoint(curPoint,keyDepositePoint));
     e4c:	c0 91 b8 02 	lds	r28, 0x02B8
     e50:	60 91 b9 02 	lds	r22, 0x02B9
     e54:	70 91 ba 02 	lds	r23, 0x02BA
     e58:	80 91 bb 02 	lds	r24, 0x02BB
     e5c:	90 91 bc 02 	lds	r25, 0x02BC
     e60:	20 91 a2 02 	lds	r18, 0x02A2
     e64:	30 91 a3 02 	lds	r19, 0x02A3
     e68:	40 91 a4 02 	lds	r20, 0x02A4
     e6c:	50 91 a5 02 	lds	r21, 0x02A5
     e70:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z9nextPoint5PointS_>
     e74:	8b 01       	movw	r16, r22
     e76:	9c 01       	movw	r18, r24
     e78:	60 91 b9 02 	lds	r22, 0x02B9
     e7c:	70 91 ba 02 	lds	r23, 0x02BA
     e80:	80 91 bb 02 	lds	r24, 0x02BB
     e84:	90 91 bc 02 	lds	r25, 0x02BC
     e88:	4c 2f       	mov	r20, r28
     e8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z11pathPlanner5Point9DirectionS_>
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <_Z6getComv+0x1a8>
		}
	}	
	while(1)
	{
		PORTB^=1<<1;
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	88 b3       	in	r24, 0x18	; 24
     e94:	89 27       	eor	r24, r25
     e96:	88 bb       	out	0x18, r24	; 24
     e98:	2f ef       	ldi	r18, 0xFF	; 255
     e9a:	39 e6       	ldi	r19, 0x69	; 105
     e9c:	48 e1       	ldi	r20, 0x18	; 24
     e9e:	21 50       	subi	r18, 0x01	; 1
     ea0:	30 40       	sbci	r19, 0x00	; 0
     ea2:	40 40       	sbci	r20, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <_Z6getComv+0x19a>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <_Z6getComv+0x1a4>
     ea8:	00 00       	nop
     eaa:	f3 cf       	rjmp	.-26     	; 0xe92 <_Z6getComv+0x18e>
		_delay_ms(500);
	}
}
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	08 95       	ret

00000eb4 <_Z15reachedDataDestv>:
void reachedDataDest()
{
	if(skillState==DRYRUN)
     eb4:	80 91 b6 02 	lds	r24, 0x02B6
     eb8:	88 23       	and	r24, r24
     eba:	39 f5       	brne	.+78     	; 0xf0a <_Z15reachedDataDestv+0x56>
	{
		PORTC=STOP;
     ebc:	15 ba       	out	0x15, r1	; 21
		FloydWarshallWithPathReconstruction();
     ebe:	0e 94 97 03 	call	0x72e	; 0x72e <_Z35FloydWarshallWithPathReconstructionv>
		
		skillState=FINDINTRUDER;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 b6 02 	sts	0x02B6, r24
		curPoint.x = -1; curPoint.y = 0;
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	90 93 ba 02 	sts	0x02BA, r25
     ed0:	80 93 b9 02 	sts	0x02B9, r24
     ed4:	10 92 bc 02 	sts	0x02BC, r1
     ed8:	10 92 bb 02 	sts	0x02BB, r1
		curDir = EAST;
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	80 93 b8 02 	sts	0x02B8, r24
		state = LF;
     ee2:	10 92 b7 02 	sts	0x02B7, r1
		adc_init();
     ee6:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8adc_initv>
		PORTB=0b00000011;
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	88 bb       	out	0x18, r24	; 24
     eee:	8a ea       	ldi	r24, 0xAA	; 170
     ef0:	96 ee       	ldi	r25, 0xE6	; 230
     ef2:	a6 e9       	ldi	r26, 0x96	; 150
     ef4:	b1 e0       	ldi	r27, 0x01	; 1
     ef6:	81 50       	subi	r24, 0x01	; 1
     ef8:	90 40       	sbci	r25, 0x00	; 0
     efa:	a0 40       	sbci	r26, 0x00	; 0
     efc:	b0 40       	sbci	r27, 0x00	; 0
     efe:	d9 f7       	brne	.-10     	; 0xef6 <_Z15reachedDataDestv+0x42>
     f00:	00 00       	nop
		_delay_ms(10000);
		openFront();
     f02:	0e 94 a9 01 	call	0x352	; 0x352 <_Z9openFrontv>
		PORTB=0;		
     f06:	18 ba       	out	0x18, r1	; 24
     f08:	08 95       	ret
	}
	else if (skillState==FINDINTRUDER)
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	c9 f4       	brne	.+50     	; 0xf40 <_Z15reachedDataDestv+0x8c>
	{
		PORTC=STOP;
     f0e:	15 ba       	out	0x15, r1	; 21
		curGoalIndex++;
     f10:	80 91 bd 02 	lds	r24, 0x02BD
     f14:	90 91 be 02 	lds	r25, 0x02BE
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	90 93 be 02 	sts	0x02BE, r25
     f1e:	80 93 bd 02 	sts	0x02BD, r24
		if(curGoalIndex >= maxpts)
     f22:	20 91 60 00 	lds	r18, 0x0060
     f26:	30 91 61 00 	lds	r19, 0x0061
     f2a:	82 17       	cp	r24, r18
     f2c:	93 07       	cpc	r25, r19
     f2e:	24 f0       	brlt	.+8      	; 0xf38 <_Z15reachedDataDestv+0x84>
		state=END;
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	80 93 b7 02 	sts	0x02B7, r24
     f36:	08 95       	ret
		else
		state=NODE;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 b7 02 	sts	0x02B7, r24
     f3e:	08 95       	ret
	}
	else if (skillState==CARRYINTRUDER)
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	81 f5       	brne	.+96     	; 0xfa4 <_Z15reachedDataDestv+0xf0>
	{
		PORTC=STOP;
     f44:	15 ba       	out	0x15, r1	; 21
		align(WEST);
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	0e 94 81 02 	call	0x502	; 0x502 <_Z5align9Direction>
		while(!(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S))){ linefollow(); _delay_ms(500);}
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <_Z15reachedDataDestv+0xb0>
     f4e:	0e 94 3b 01 	call	0x276	; 0x276 <_Z10linefollowv>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	99 e6       	ldi	r25, 0x69	; 105
     f56:	a8 e1       	ldi	r26, 0x18	; 24
     f58:	81 50       	subi	r24, 0x01	; 1
     f5a:	90 40       	sbci	r25, 0x00	; 0
     f5c:	a0 40       	sbci	r26, 0x00	; 0
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <_Z15reachedDataDestv+0xa4>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <_Z15reachedDataDestv+0xae>
     f62:	00 00       	nop
     f64:	b3 99       	sbic	0x16, 3	; 22
     f66:	f3 cf       	rjmp	.-26     	; 0xf4e <_Z15reachedDataDestv+0x9a>
     f68:	b7 99       	sbic	0x16, 7	; 22
     f6a:	f1 cf       	rjmp	.-30     	; 0xf4e <_Z15reachedDataDestv+0x9a>
     f6c:	b4 9b       	sbis	0x16, 4	; 22
     f6e:	ef cf       	rjmp	.-34     	; 0xf4e <_Z15reachedDataDestv+0x9a>
     f70:	b6 9b       	sbis	0x16, 6	; 22
     f72:	ed cf       	rjmp	.-38     	; 0xf4e <_Z15reachedDataDestv+0x9a>
     f74:	b5 9b       	sbis	0x16, 5	; 22
     f76:	eb cf       	rjmp	.-42     	; 0xf4e <_Z15reachedDataDestv+0x9a>
		openFront();
     f78:	0e 94 a9 01 	call	0x352	; 0x352 <_Z9openFrontv>
		while(1)
		{
			if((WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))) break;
     f7c:	b3 9b       	sbis	0x16, 3	; 22
     f7e:	55 c0       	rjmp	.+170    	; 0x102a <_Z15reachedDataDestv+0x176>
     f80:	b7 9b       	sbis	0x16, 7	; 22
     f82:	53 c0       	rjmp	.+166    	; 0x102a <_Z15reachedDataDestv+0x176>
			linefollowbackward();
			_delay_ms(100);
		}
		state=NODE;		
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	80 93 b7 02 	sts	0x02B7, r24
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	97 ea       	ldi	r25, 0xA7	; 167
     f8e:	a1 e6       	ldi	r26, 0x61	; 97
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	90 40       	sbci	r25, 0x00	; 0
     f94:	a0 40       	sbci	r26, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <_Z15reachedDataDestv+0xdc>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <_Z15reachedDataDestv+0xe6>
     f9a:	00 00       	nop
		_delay_ms(WAIT_FOR_KEYBLOCK);
		skillState=GOTOKEY;
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	80 93 b6 02 	sts	0x02B6, r24
     fa2:	08 95       	ret
		
	}
	else if(skillState==GOTOKEY)
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	19 f5       	brne	.+70     	; 0xfee <_Z15reachedDataDestv+0x13a>
	{
		PORTC=STOP;
     fa8:	15 ba       	out	0x15, r1	; 21
		align(WEST);		
     faa:	0e 94 81 02 	call	0x502	; 0x502 <_Z5align9Direction>
		
		while(adc_read(0)>ADC_KEY_THRESH)
     fae:	0b c0       	rjmp	.+22     	; 0xfc6 <_Z15reachedDataDestv+0x112>
		{
			linefollow();
     fb0:	0e 94 3b 01 	call	0x276	; 0x276 <_Z10linefollowv>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	91 ee       	ldi	r25, 0xE1	; 225
     fb8:	a4 e0       	ldi	r26, 0x04	; 4
     fba:	81 50       	subi	r24, 0x01	; 1
     fbc:	90 40       	sbci	r25, 0x00	; 0
     fbe:	a0 40       	sbci	r26, 0x00	; 0
     fc0:	e1 f7       	brne	.-8      	; 0xfba <_Z15reachedDataDestv+0x106>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <_Z15reachedDataDestv+0x110>
     fc4:	00 00       	nop
	else if(skillState==GOTOKEY)
	{
		PORTC=STOP;
		align(WEST);		
		
		while(adc_read(0)>ADC_KEY_THRESH)
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z8adc_readh>
     fcc:	a3 e0       	ldi	r26, 0x03	; 3
     fce:	81 32       	cpi	r24, 0x21	; 33
     fd0:	9a 07       	cpc	r25, r26
     fd2:	70 f7       	brcc	.-36     	; 0xfb0 <_Z15reachedDataDestv+0xfc>
		{
			linefollow();
			_delay_ms(100);
		}
		skillState=CARRYKEY;
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	80 93 b6 02 	sts	0x02B6, r24
		closeFront();
     fda:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z10closeFrontv>
		while(1)
		{
			if((WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))) break;
     fde:	b3 9b       	sbis	0x16, 3	; 22
     fe0:	30 c0       	rjmp	.+96     	; 0x1042 <_Z15reachedDataDestv+0x18e>
     fe2:	b7 9b       	sbis	0x16, 7	; 22
     fe4:	2e c0       	rjmp	.+92     	; 0x1042 <_Z15reachedDataDestv+0x18e>
			linefollowbackward();
			_delay_ms(100);
		}
		state=NODE;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 b7 02 	sts	0x02B7, r24
     fec:	08 95       	ret
	}
	else if(skillState==CARRYKEY)
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	09 f0       	breq	.+2      	; 0xff4 <_Z15reachedDataDestv+0x140>
     ff2:	3f c0       	rjmp	.+126    	; 0x1072 <_Z15reachedDataDestv+0x1be>
	{
		PORTC=STOP;
     ff4:	15 ba       	out	0x15, r1	; 21
		align(EAST);
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	0e 94 81 02 	call	0x502	; 0x502 <_Z5align9Direction>
		while(!(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S))) linefollow();
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <_Z15reachedDataDestv+0x14e>
     ffe:	0e 94 3b 01 	call	0x276	; 0x276 <_Z10linefollowv>
    1002:	b3 99       	sbic	0x16, 3	; 22
    1004:	fc cf       	rjmp	.-8      	; 0xffe <_Z15reachedDataDestv+0x14a>
    1006:	b7 99       	sbic	0x16, 7	; 22
    1008:	fa cf       	rjmp	.-12     	; 0xffe <_Z15reachedDataDestv+0x14a>
    100a:	b4 9b       	sbis	0x16, 4	; 22
    100c:	f8 cf       	rjmp	.-16     	; 0xffe <_Z15reachedDataDestv+0x14a>
    100e:	b6 9b       	sbis	0x16, 6	; 22
    1010:	f6 cf       	rjmp	.-20     	; 0xffe <_Z15reachedDataDestv+0x14a>
    1012:	b5 9b       	sbis	0x16, 5	; 22
    1014:	f4 cf       	rjmp	.-24     	; 0xffe <_Z15reachedDataDestv+0x14a>
		openFront();
    1016:	0e 94 a9 01 	call	0x352	; 0x352 <_Z9openFrontv>
		while(1)
		{
			if((WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))) break;
    101a:	b3 9b       	sbis	0x16, 3	; 22
    101c:	1e c0       	rjmp	.+60     	; 0x105a <_Z15reachedDataDestv+0x1a6>
    101e:	b7 9b       	sbis	0x16, 7	; 22
    1020:	1c c0       	rjmp	.+56     	; 0x105a <_Z15reachedDataDestv+0x1a6>
			linefollowbackward();
			_delay_ms(100);
		}
		state=END;
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	80 93 b7 02 	sts	0x02B7, r24
    1028:	08 95       	ret
		while(!(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S))){ linefollow(); _delay_ms(500);}
		openFront();
		while(1)
		{
			if((WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))) break;
			linefollowbackward();
    102a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z18linefollowbackwardv>
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	91 ee       	ldi	r25, 0xE1	; 225
    1032:	a4 e0       	ldi	r26, 0x04	; 4
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	a0 40       	sbci	r26, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <_Z15reachedDataDestv+0x180>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <_Z15reachedDataDestv+0x18a>
    103e:	00 00       	nop
    1040:	9d cf       	rjmp	.-198    	; 0xf7c <_Z15reachedDataDestv+0xc8>
		skillState=CARRYKEY;
		closeFront();
		while(1)
		{
			if((WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))) break;
			linefollowbackward();
    1042:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z18linefollowbackwardv>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	91 ee       	ldi	r25, 0xE1	; 225
    104a:	a4 e0       	ldi	r26, 0x04	; 4
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	a0 40       	sbci	r26, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <_Z15reachedDataDestv+0x198>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <_Z15reachedDataDestv+0x1a2>
    1056:	00 00       	nop
    1058:	c2 cf       	rjmp	.-124    	; 0xfde <_Z15reachedDataDestv+0x12a>
		while(!(BLACK(LEFTEXTREME_S)&&BLACK(RIGHTEXTREME_S)&&WHITE(LEFT_S)&&WHITE(RIGHT_S)&&WHITE(CENTER_S))) linefollow();
		openFront();
		while(1)
		{
			if((WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))) break;
			linefollowbackward();
    105a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z18linefollowbackwardv>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	91 ee       	ldi	r25, 0xE1	; 225
    1062:	a4 e0       	ldi	r26, 0x04	; 4
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	a0 40       	sbci	r26, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <_Z15reachedDataDestv+0x1b0>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <_Z15reachedDataDestv+0x1ba>
    106e:	00 00       	nop
    1070:	d4 cf       	rjmp	.-88     	; 0x101a <_Z15reachedDataDestv+0x166>
    1072:	08 95       	ret

00001074 <main>:
}
int main (void)
{
	//int8_t gridSensorVal;
	enum Command com;
	skillState=DRYRUN;
    1074:	10 92 b6 02 	sts	0x02B6, r1
	setup();
    1078:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z5setupv>
	{
		if(skillState==FINDINTRUDER)
		{
			if(adc_read(0)<ADC_INTRUDER_THRESH)
			{
				skillState=CARRYINTRUDER;
    107c:	c2 e0       	ldi	r28, 0x02	; 2
				case TR:
				nodeRIGHTFORWARD();
				switch(curDir)
				{
					case EAST: curDir = SOUTH; break;
					case SOUTH: curDir = WEST; break;
    107e:	0f 2e       	mov	r0, r31
    1080:	f3 e0       	ldi	r31, 0x03	; 3
    1082:	df 2e       	mov	r13, r31
    1084:	f0 2d       	mov	r31, r0
				break;
				case TR:
				nodeRIGHTFORWARD();
				switch(curDir)
				{
					case EAST: curDir = SOUTH; break;
    1086:	d1 e0       	ldi	r29, 0x01	; 1
				if(WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))
				{
				switch(curDir)
				{
					case NORTH: curPoint.y--; break;
					case SOUTH: curPoint.y++; break;
    1088:	0b eb       	ldi	r16, 0xBB	; 187
    108a:	12 e0       	ldi	r17, 0x02	; 2
					case EAST: curPoint.x++; break;
    108c:	0f 2e       	mov	r0, r31
    108e:	f9 eb       	ldi	r31, 0xB9	; 185
    1090:	ef 2e       	mov	r14, r31
    1092:	f2 e0       	ldi	r31, 0x02	; 2
    1094:	ff 2e       	mov	r15, r31
    1096:	f0 2d       	mov	r31, r0
	enum Command com;
	skillState=DRYRUN;
	setup();
	while(1)
	{
		if(skillState==FINDINTRUDER)
    1098:	80 91 b6 02 	lds	r24, 0x02B6
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	51 f4       	brne	.+20     	; 0x10b4 <main+0x40>
		{
			if(adc_read(0)<ADC_INTRUDER_THRESH)
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z8adc_readh>
    10a6:	82 33       	cpi	r24, 0x32	; 50
    10a8:	91 05       	cpc	r25, r1
    10aa:	20 f4       	brcc	.+8      	; 0x10b4 <main+0x40>
			{
				skillState=CARRYINTRUDER;
    10ac:	c0 93 b6 02 	sts	0x02B6, r28
				closeFront();
    10b0:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z10closeFrontv>
			}
			
		}
		switch(state)
    10b4:	80 91 b7 02 	lds	r24, 0x02B7
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	09 f4       	brne	.+2      	; 0x10be <main+0x4a>
    10bc:	4a c0       	rjmp	.+148    	; 0x1152 <main+0xde>
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	38 f0       	brcs	.+14     	; 0x10d0 <main+0x5c>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <main+0x54>
    10c6:	b1 c0       	rjmp	.+354    	; 0x122a <main+0x1b6>
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	09 f0       	breq	.+2      	; 0x10ce <main+0x5a>
    10cc:	b2 c0       	rjmp	.+356    	; 0x1232 <main+0x1be>
    10ce:	b0 c0       	rjmp	.+352    	; 0x1230 <main+0x1bc>
		{
			case LF:
			linefollow();
    10d0:	0e 94 3b 01 	call	0x276	; 0x276 <_Z10linefollowv>
			if(WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S)) //both WHITE - Node is reached.
    10d4:	b3 9b       	sbis	0x16, 3	; 22
    10d6:	ad c0       	rjmp	.+346    	; 0x1232 <main+0x1be>
    10d8:	b7 9b       	sbis	0x16, 7	; 22
    10da:	ab c0       	rjmp	.+342    	; 0x1232 <main+0x1be>
			{
				PORTC=STOP;
    10dc:	15 ba       	out	0x15, r1	; 21
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	91 ee       	ldi	r25, 0xE1	; 225
    10e2:	a4 e0       	ldi	r26, 0x04	; 4
    10e4:	81 50       	subi	r24, 0x01	; 1
    10e6:	90 40       	sbci	r25, 0x00	; 0
    10e8:	a0 40       	sbci	r26, 0x00	; 0
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <main+0x70>
    10ec:	00 c0       	rjmp	.+0      	; 0x10ee <main+0x7a>
    10ee:	00 00       	nop
				_delay_ms(100);
				if(WHITE(LEFTEXTREME_S) && WHITE(RIGHTEXTREME_S))
    10f0:	b3 9b       	sbis	0x16, 3	; 22
    10f2:	9f c0       	rjmp	.+318    	; 0x1232 <main+0x1be>
    10f4:	b7 9b       	sbis	0x16, 7	; 22
    10f6:	9d c0       	rjmp	.+314    	; 0x1232 <main+0x1be>
				{
				switch(curDir)
    10f8:	80 91 b8 02 	lds	r24, 0x02B8
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <main+0xac>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	28 f0       	brcs	.+10     	; 0x110e <main+0x9a>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	99 f0       	breq	.+38     	; 0x112e <main+0xba>
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	01 f5       	brne	.+64     	; 0x114c <main+0xd8>
    110c:	19 c0       	rjmp	.+50     	; 0x1140 <main+0xcc>
				{
					case NORTH: curPoint.y--; break;
    110e:	d8 01       	movw	r26, r16
    1110:	8d 91       	ld	r24, X+
    1112:	9c 91       	ld	r25, X
    1114:	11 97       	sbiw	r26, 0x01	; 1
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
    111e:	16 c0       	rjmp	.+44     	; 0x114c <main+0xd8>
					case SOUTH: curPoint.y++; break;
    1120:	f8 01       	movw	r30, r16
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
    112c:	0f c0       	rjmp	.+30     	; 0x114c <main+0xd8>
					case EAST: curPoint.x++; break;
    112e:	d7 01       	movw	r26, r14
    1130:	8d 91       	ld	r24, X+
    1132:	9c 91       	ld	r25, X
    1134:	11 97       	sbiw	r26, 0x01	; 1
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	9c 93       	st	X, r25
    113c:	8e 93       	st	-X, r24
    113e:	06 c0       	rjmp	.+12     	; 0x114c <main+0xd8>
					case WEST: curPoint.x--; break;
    1140:	f7 01       	movw	r30, r14
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
				}
				state = NODE;
    114c:	d0 93 b7 02 	sts	0x02B7, r29
    1150:	70 c0       	rjmp	.+224    	; 0x1232 <main+0x1be>
				}				
			}
			
			break;
			case NODE:
			PORTC=STOP;
    1152:	15 ba       	out	0x15, r1	; 21
			com =getCom();
    1154:	0e 94 82 06 	call	0xd04	; 0xd04 <_Z6getComv>
			switch(com)
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	b1 f0       	breq	.+44     	; 0x1188 <main+0x114>
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	30 f4       	brcc	.+12     	; 0x116c <main+0xf8>
    1160:	88 23       	and	r24, r24
    1162:	69 f0       	breq	.+26     	; 0x117e <main+0x10a>
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	09 f0       	breq	.+2      	; 0x116a <main+0xf6>
    1168:	64 c0       	rjmp	.+200    	; 0x1232 <main+0x1be>
    116a:	29 c0       	rjmp	.+82     	; 0x11be <main+0x14a>
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	09 f4       	brne	.+2      	; 0x1172 <main+0xfe>
    1170:	41 c0       	rjmp	.+130    	; 0x11f4 <main+0x180>
    1172:	84 30       	cpi	r24, 0x04	; 4
    1174:	09 f0       	breq	.+2      	; 0x1178 <main+0x104>
    1176:	5d c0       	rjmp	.+186    	; 0x1232 <main+0x1be>
			{
				case REACHED:
				state = DATA_DEST;
    1178:	c0 93 b7 02 	sts	0x02B7, r28
				break;
    117c:	5a c0       	rjmp	.+180    	; 0x1232 <main+0x1be>
				case STRAIGHT:
				nodeStraight();
    117e:	0e 94 23 02 	call	0x446	; 0x446 <_Z12nodeStraightv>
				state = LF;
    1182:	10 92 b7 02 	sts	0x02B7, r1
				break;
    1186:	55 c0       	rjmp	.+170    	; 0x1232 <main+0x1be>
				case TR:
				nodeRIGHTFORWARD();
    1188:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z16nodeRIGHTFORWARDv>
				switch(curDir)
    118c:	80 91 b8 02 	lds	r24, 0x02B8
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	51 f0       	breq	.+20     	; 0x11a8 <main+0x134>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	70 f0       	brcs	.+28     	; 0x11b4 <main+0x140>
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	19 f0       	breq	.+6      	; 0x11a2 <main+0x12e>
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	61 f4       	brne	.+24     	; 0x11b8 <main+0x144>
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <main+0x13a>
				{
					case EAST: curDir = SOUTH; break;
    11a2:	d0 93 b8 02 	sts	0x02B8, r29
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <main+0x144>
					case SOUTH: curDir = WEST; break;
    11a8:	d0 92 b8 02 	sts	0x02B8, r13
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <main+0x144>
					case WEST: curDir = NORTH; break;
    11ae:	10 92 b8 02 	sts	0x02B8, r1
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <main+0x144>
					case NORTH: curDir = EAST; break;
    11b4:	c0 93 b8 02 	sts	0x02B8, r28
				}
				state = LF;
    11b8:	10 92 b7 02 	sts	0x02B7, r1
				break;
    11bc:	3a c0       	rjmp	.+116    	; 0x1232 <main+0x1be>
				case TL:
				nodeLEFTFORWARD();
    11be:	0e 94 c5 01 	call	0x38a	; 0x38a <_Z15nodeLEFTFORWARDv>
				switch(curDir)
    11c2:	80 91 b8 02 	lds	r24, 0x02B8
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	81 f0       	breq	.+32     	; 0x11ea <main+0x176>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	40 f0       	brcs	.+16     	; 0x11de <main+0x16a>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <main+0x164>
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	61 f4       	brne	.+24     	; 0x11ee <main+0x17a>
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <main+0x170>
				{
					case EAST: curDir = NORTH; break;
    11d8:	10 92 b8 02 	sts	0x02B8, r1
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <main+0x17a>
					case NORTH: curDir = WEST; break;
    11de:	d0 92 b8 02 	sts	0x02B8, r13
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <main+0x17a>
					case WEST: curDir = SOUTH; break;
    11e4:	d0 93 b8 02 	sts	0x02B8, r29
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <main+0x17a>
					case SOUTH: curDir = EAST; break;
    11ea:	c0 93 b8 02 	sts	0x02B8, r28
				}
				state = LF;
    11ee:	10 92 b7 02 	sts	0x02B7, r1
				break;
    11f2:	1f c0       	rjmp	.+62     	; 0x1232 <main+0x1be>
				case UT:
				nodeUTurn();
    11f4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_Z9nodeUTurnv>
				switch(curDir)
    11f8:	80 91 b8 02 	lds	r24, 0x02B8
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <main+0x1ac>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	40 f0       	brcs	.+16     	; 0x1214 <main+0x1a0>
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	19 f0       	breq	.+6      	; 0x120e <main+0x19a>
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	61 f4       	brne	.+24     	; 0x1224 <main+0x1b0>
    120c:	06 c0       	rjmp	.+12     	; 0x121a <main+0x1a6>
				{
					case EAST: curDir = WEST; break;
    120e:	d0 92 b8 02 	sts	0x02B8, r13
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <main+0x1b0>
					case NORTH: curDir = SOUTH; break;
    1214:	d0 93 b8 02 	sts	0x02B8, r29
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <main+0x1b0>
					case WEST: curDir = EAST; break;
    121a:	c0 93 b8 02 	sts	0x02B8, r28
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <main+0x1b0>
					case SOUTH: curDir = NORTH; break;
    1220:	10 92 b8 02 	sts	0x02B8, r1
				}
				state = LF;
    1224:	10 92 b7 02 	sts	0x02B7, r1
				break;
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <main+0x1be>
			}
			break;
			case DATA_DEST:
			reachedDataDest();			
    122a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z15reachedDataDestv>
			break;
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <main+0x1be>
			case END:
			PORTC=STOP;
    1230:	15 ba       	out	0x15, r1	; 21
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	90 e7       	ldi	r25, 0x70	; 112
    1236:	a2 e0       	ldi	r26, 0x02	; 2
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	90 40       	sbci	r25, 0x00	; 0
    123c:	a0 40       	sbci	r26, 0x00	; 0
    123e:	e1 f7       	brne	.-8      	; 0x1238 <main+0x1c4>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <main+0x1ce>
    1242:	00 00       	nop
    1244:	29 cf       	rjmp	.-430    	; 0x1098 <main+0x24>

00001246 <__vector_11>:
		_delay_ms(50);
	}
	
}
ISR(TIMER0_OVF_vect)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
	//PWM
	cli();
    1258:	f8 94       	cli
	counter++;
    125a:	80 91 ae 02 	lds	r24, 0x02AE
    125e:	90 91 af 02 	lds	r25, 0x02AF
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	90 93 af 02 	sts	0x02AF, r25
    1268:	80 93 ae 02 	sts	0x02AE, r24
	if(counter==pwmLeft)
    126c:	20 91 b4 02 	lds	r18, 0x02B4
    1270:	30 91 b5 02 	lds	r19, 0x02B5
    1274:	82 17       	cp	r24, r18
    1276:	93 07       	cpc	r25, r19
    1278:	09 f4       	brne	.+2      	; 0x127c <__vector_11+0x36>
	{
		PORTC &= ~(1 << PWMLEFT);
    127a:	aa 98       	cbi	0x15, 2	; 21
	}
	if(counter==pwmRight)
    127c:	20 91 ae 02 	lds	r18, 0x02AE
    1280:	30 91 af 02 	lds	r19, 0x02AF
    1284:	80 91 b2 02 	lds	r24, 0x02B2
    1288:	90 91 b3 02 	lds	r25, 0x02B3
    128c:	28 17       	cp	r18, r24
    128e:	39 07       	cpc	r19, r25
    1290:	09 f4       	brne	.+2      	; 0x1294 <__vector_11+0x4e>
	{
		PORTC &= ~(1 << PWMRIGHT);
    1292:	ad 98       	cbi	0x15, 5	; 21
	}
	if(counter==pwmFront)
    1294:	20 91 ae 02 	lds	r18, 0x02AE
    1298:	30 91 af 02 	lds	r19, 0x02AF
    129c:	80 91 b0 02 	lds	r24, 0x02B0
    12a0:	90 91 b1 02 	lds	r25, 0x02B1
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__vector_11+0x66>
	{
		PORTA &= ~(1 << PWMFRONT);
    12aa:	dd 98       	cbi	0x1b, 5	; 27
		//PORTB =0b11000000;
	}
	if(counter==20)
    12ac:	80 91 ae 02 	lds	r24, 0x02AE
    12b0:	90 91 af 02 	lds	r25, 0x02AF
    12b4:	84 31       	cpi	r24, 0x14	; 20
    12b6:	91 05       	cpc	r25, r1
    12b8:	41 f4       	brne	.+16     	; 0x12ca <__vector_11+0x84>
	{
		counter=0;
    12ba:	10 92 af 02 	sts	0x02AF, r1
    12be:	10 92 ae 02 	sts	0x02AE, r1
		PORTC |= (1 << PWMLEFT|1<<PWMRIGHT);
    12c2:	85 b3       	in	r24, 0x15	; 21
    12c4:	84 62       	ori	r24, 0x24	; 36
    12c6:	85 bb       	out	0x15, r24	; 21
		PORTA |= (1<<PWMFRONT);
    12c8:	dd 9a       	sbi	0x1b, 5	; 27
	}
	sei();
    12ca:	78 94       	sei
}
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_1>:
ISR(INT0_vect)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
	FloydWarshallWithPathReconstruction();
    1300:	0e 94 97 03 	call	0x72e	; 0x72e <_Z35FloydWarshallWithPathReconstructionv>
	
	skillState=FINDINTRUDER;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	80 93 b6 02 	sts	0x02B6, r24
	curPoint.x = -1; curPoint.y = 0;
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	90 93 ba 02 	sts	0x02BA, r25
    1312:	80 93 b9 02 	sts	0x02B9, r24
    1316:	10 92 bc 02 	sts	0x02BC, r1
    131a:	10 92 bb 02 	sts	0x02BB, r1
	curDir = EAST;
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	80 93 b8 02 	sts	0x02B8, r24
	state = LF;
    1324:	10 92 b7 02 	sts	0x02B7, r1
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <_GLOBAL__sub_I_goalArr>:
    134a:	10 92 c0 02 	sts	0x02C0, r1
    134e:	10 92 bf 02 	sts	0x02BF, r1
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	90 93 c2 02 	sts	0x02C2, r25
    135a:	80 93 c1 02 	sts	0x02C1, r24
    135e:	10 92 ab 02 	sts	0x02AB, r1
    1362:	10 92 aa 02 	sts	0x02AA, r1
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	30 93 ad 02 	sts	0x02AD, r19
    136e:	20 93 ac 02 	sts	0x02AC, r18
    1372:	10 92 a7 02 	sts	0x02A7, r1
    1376:	10 92 a6 02 	sts	0x02A6, r1
    137a:	90 93 a9 02 	sts	0x02A9, r25
    137e:	80 93 a8 02 	sts	0x02A8, r24
    1382:	90 93 a3 02 	sts	0x02A3, r25
    1386:	80 93 a2 02 	sts	0x02A2, r24
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	90 93 a5 02 	sts	0x02A5, r25
    1392:	80 93 a4 02 	sts	0x02A4, r24
    1396:	08 95       	ret

00001398 <__divmodhi4>:
    1398:	97 fb       	bst	r25, 7
    139a:	09 2e       	mov	r0, r25
    139c:	07 26       	eor	r0, r23
    139e:	0a d0       	rcall	.+20     	; 0x13b4 <__divmodhi4_neg1>
    13a0:	77 fd       	sbrc	r23, 7
    13a2:	04 d0       	rcall	.+8      	; 0x13ac <__divmodhi4_neg2>
    13a4:	0c d0       	rcall	.+24     	; 0x13be <__udivmodhi4>
    13a6:	06 d0       	rcall	.+12     	; 0x13b4 <__divmodhi4_neg1>
    13a8:	00 20       	and	r0, r0
    13aa:	1a f4       	brpl	.+6      	; 0x13b2 <__divmodhi4_exit>

000013ac <__divmodhi4_neg2>:
    13ac:	70 95       	com	r23
    13ae:	61 95       	neg	r22
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255

000013b2 <__divmodhi4_exit>:
    13b2:	08 95       	ret

000013b4 <__divmodhi4_neg1>:
    13b4:	f6 f7       	brtc	.-4      	; 0x13b2 <__divmodhi4_exit>
    13b6:	90 95       	com	r25
    13b8:	81 95       	neg	r24
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	08 95       	ret

000013be <__udivmodhi4>:
    13be:	aa 1b       	sub	r26, r26
    13c0:	bb 1b       	sub	r27, r27
    13c2:	51 e1       	ldi	r21, 0x11	; 17
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <__udivmodhi4_ep>

000013c6 <__udivmodhi4_loop>:
    13c6:	aa 1f       	adc	r26, r26
    13c8:	bb 1f       	adc	r27, r27
    13ca:	a6 17       	cp	r26, r22
    13cc:	b7 07       	cpc	r27, r23
    13ce:	10 f0       	brcs	.+4      	; 0x13d4 <__udivmodhi4_ep>
    13d0:	a6 1b       	sub	r26, r22
    13d2:	b7 0b       	sbc	r27, r23

000013d4 <__udivmodhi4_ep>:
    13d4:	88 1f       	adc	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	5a 95       	dec	r21
    13da:	a9 f7       	brne	.-22     	; 0x13c6 <__udivmodhi4_loop>
    13dc:	80 95       	com	r24
    13de:	90 95       	com	r25
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	08 95       	ret

000013e6 <__tablejump2__>:
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31

000013ea <__tablejump__>:
    13ea:	05 90       	lpm	r0, Z+
    13ec:	f4 91       	lpm	r31, Z
    13ee:	e0 2d       	mov	r30, r0
    13f0:	09 94       	ijmp

000013f2 <_exit>:
    13f2:	f8 94       	cli

000013f4 <__stop_program>:
    13f4:	ff cf       	rjmp	.-2      	; 0x13f4 <__stop_program>
